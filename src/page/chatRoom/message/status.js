import React from "react";import {    Image,    StyleSheet,    View,    Animated,    TouchableOpacity,    Easing,    Dimensions,} from "react-native";import { observer, inject } from 'mobx-react/native';import { Icon } from '../../../component/customicons';import {betStore, socketStore} from "../../../store/index";const { width } = Dimensions.get('window');@inject('betStore')@observerexport default class Status extends React.Component {    constructor (props) {        super (props);        this.state = {            condition: props.condition        };        this.spinValue = new Animated.Value(0);        this.spin = this.spin.bind(this);        this.getStatus = this.getStatus.bind(this);        this.onPressHandle = this.onPressHandle.bind(this);    }    spin () {        this.spinValue.setValue(0);        Animated.timing(            this.spinValue,            {                toValue: 1,                duration: 1000,                easing: Easing.linear            }        ).start(() => {            const { condition } = this.props;            if (condition === 'loading' || condition === 'retry') {                this.spin()            } else {                console.log('animate end')            }        })    }    getStatus (condition) {        switch (condition) {            case 'loading' :                return require('../../../assets/images/icon_loading.png');            case 'success' :                return 'icon-ok';            case 'fail' :                return 'icon-warn-fail';            case 'retry' :                return 'icon-reload';        }    }    onPressHandle () {        const { condition, messageListIndex } = this.props;        // if (condition === 'fail') {        //     this.spin();            // onRetry && onRetry('loading');        // }        this.spin();        betStore.reSubmitBet(messageListIndex)    }    componentDidMount () {        const { condition } = this.props;        if (condition === 'loading' || condition === 'retry') {            this.spin()        }    }    render () {        const { condition, typeDesc } = this.props;        const spin = this.spinValue.interpolate({            inputRange: [0, 1],            outputRange: ['0deg', '360deg']        });        return (            <View style={styles.container} >                {                    condition === 'loading' ? (                        <Animated.Image style={[styles.icon, {transform: [{rotate: spin}] }]}                                        source={this.getStatus(condition)}/>                    ) : (                        <Icon color={condition === 'fail' ? '#D0021B' : '#5CB900'} size={condition === 'fail' ? 19 : 22} name={this.getStatus(condition)}/>                    )                }                { condition === 'fail' && typeDesc !== 'message' && (                    <TouchableOpacity style={styles.retry} onPress={this.onPressHandle}>                        <Icon color='#bbb' size={22} name={this.getStatus('retry')}/>                    </TouchableOpacity>                )}            </View>        )    }}const styles = StyleSheet.create({    container: {        marginRight: 8,        flexDirection: 'row',        justifyContent: 'center',        alignItems: 'center',    },    icon: {        width: 20,        height: 20,        borderRadius: 10,    },    retry: {        marginLeft: 8    }});