apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
        entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion 23
    buildToolsVersion '27.0.3'

    defaultConfig {
        applicationId "com.angelia.wancai"
        minSdkVersion 16
        targetSdkVersion 22
        versionCode 1
        versionName "1.0.0"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }

        buildConfigField "String", "CODE_PUSH_SERVER_URL", "\"" + rootProject.ext.global.CODE_PUSH_SERVER_URL + "\""
    }
    signingConfigs {
        release {
            storeFile file('../keystores/release.qaz1234WSX.jks')
            storePassword 'qaz1234WSX'
            keyAlias 'wancai'
            keyPassword 'qaz1234WSX'
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }

    productFlavors {
        wancai {
            applicationId rootProject.ext.wancai.applicationId
            buildConfigField "String", "API_SERVER", "\"" + rootProject.ext.wancai.API_SERVER + "\""
            buildConfigField "String", "CODE_PUSH_KEY", "\"" + rootProject.ext.global.CODE_PUSH_KEY + "\""
            buildConfigField "String", "WECHAT_APP_ID", "\"" + rootProject.ext.wancai.WECHAT_APP_ID + "\""
            buildConfigField "String", "WECHAT_APP_SECRET", "\"" + rootProject.ext.wancai.WECHAT_APP_SECRET + "\""
            buildConfigField "String", "QQ_APP_ID", "\"" + rootProject.ext.wancai.QQ_APP_ID + "\""
            buildConfigField "String", "QQ_APP_SECRET", "\"" + rootProject.ext.wancai.QQ_APP_SECRET + "\""
            buildConfigField "String", "QQ_APP_CALLBACK", "\"" + rootProject.ext.wancai.QQ_APP_CALLBACK + "\""
            buildConfigField "String", "SINA_APP_ID", "\"" + rootProject.ext.wancai.SINA_APP_ID + "\""
            buildConfigField "String", "SINA_APP_SECRET", "\"" + rootProject.ext.wancai.SINA_APP_SECRET + "\""
            buildConfigField "String", "SINA_APP_CALLBACK", "\"" + rootProject.ext.wancai.SINA_APP_CALLBACK + "\""
            buildConfigField "String", "UMENG_APPKEY", "\"" + rootProject.ext.wancai.UMENG_APPKEY + "\""
            buildConfigField "String", "UMENG_MESSAGE_SECRET", "\"" + rootProject.ext.wancai.UMENG_MESSAGE_SECRET + "\""
            buildConfigField "String", "JPUSH_APPKEY", "\"" + rootProject.ext.wancai.JPUSH_APPKEY + "\""
            buildConfigField "String", "APP_CHANNEL", "\"" + rootProject.ext.wancai.APP_CHANNEL + "\""
            manifestPlaceholders = [
                    'JPUSH_APPKEY': rootProject.ext.wancai.JPUSH_KEY,
                    'APP_CHANNEL' : rootProject.ext.wancai.APP_CHANNEL,
                    'QQ_APP_ID'   : rootProject.ext.wancai.QQ_APP_ID
            ]
        }
        vip500lc {
            applicationId rootProject.ext.vip500lc.applicationId
            buildConfigField "String", "API_SERVER", "\"" + rootProject.ext.vip500lc.API_SERVER + "\""
            buildConfigField "String", "CODE_PUSH_KEY", "\"" + rootProject.ext.global.CODE_PUSH_KEY + "\""
            buildConfigField "String", "WECHAT_APP_ID", "\"" + rootProject.ext.vip500lc.WECHAT_APP_ID + "\""
            buildConfigField "String", "WECHAT_APP_SECRET", "\"" + rootProject.ext.vip500lc.WECHAT_APP_SECRET + "\""
            buildConfigField "String", "QQ_APP_ID", "\"" + rootProject.ext.vip500lc.QQ_APP_ID + "\""
            buildConfigField "String", "QQ_APP_SECRET", "\"" + rootProject.ext.vip500lc.QQ_APP_SECRET + "\""
            buildConfigField "String", "QQ_APP_CALLBACK", "\"" + rootProject.ext.vip500lc.QQ_APP_CALLBACK + "\""
            buildConfigField "String", "SINA_APP_ID", "\"" + rootProject.ext.vip500lc.SINA_APP_ID + "\""
            buildConfigField "String", "SINA_APP_SECRET", "\"" + rootProject.ext.vip500lc.SINA_APP_SECRET + "\""
            buildConfigField "String", "SINA_APP_CALLBACK", "\"" + rootProject.ext.vip500lc.SINA_APP_CALLBACK + "\""
            buildConfigField "String", "UMENG_APPKEY", "\"" + rootProject.ext.vip500lc.UMENG_APPKEY + "\""
            buildConfigField "String", "UMENG_MESSAGE_SECRET", "\"" + rootProject.ext.vip500lc.UMENG_MESSAGE_SECRET + "\""
            buildConfigField "String", "JPUSH_APPKEY", "\"" + rootProject.ext.vip500lc.JPUSH_APPKEY + "\""
            buildConfigField "String", "APP_CHANNEL", "\"" + rootProject.ext.vip500lc.APP_CHANNEL + "\""
            manifestPlaceholders = [
                    'JPUSH_APPKEY': rootProject.ext.vip500lc.JPUSH_KEY,
                    'APP_CHANNEL' : rootProject.ext.vip500lc.APP_CHANNEL,
                    'QQ_APP_ID'   : rootProject.ext.vip500lc.QQ_APP_ID
            ]
        }
        develop {
            applicationId rootProject.ext.develop.applicationId
            buildConfigField "String", "API_SERVER", "\"" + rootProject.ext.develop.API_SERVER + "\""
            buildConfigField "String", "CODE_PUSH_KEY", "\"" + rootProject.ext.develop.CODE_PUSH_KEY + "\""
            buildConfigField "String", "WECHAT_APP_ID", "\"" + rootProject.ext.develop.WECHAT_APP_ID + "\""
            buildConfigField "String", "WECHAT_APP_SECRET", "\"" + rootProject.ext.develop.WECHAT_APP_SECRET + "\""
            buildConfigField "String", "QQ_APP_ID", "\"" + rootProject.ext.develop.QQ_APP_ID + "\""
            buildConfigField "String", "QQ_APP_SECRET", "\"" + rootProject.ext.develop.QQ_APP_SECRET + "\""
            buildConfigField "String", "QQ_APP_CALLBACK", "\"" + rootProject.ext.develop.QQ_APP_CALLBACK + "\""
            buildConfigField "String", "SINA_APP_ID", "\"" + rootProject.ext.develop.SINA_APP_ID + "\""
            buildConfigField "String", "SINA_APP_SECRET", "\"" + rootProject.ext.develop.SINA_APP_SECRET + "\""
            buildConfigField "String", "SINA_APP_CALLBACK", "\"" + rootProject.ext.develop.SINA_APP_CALLBACK + "\""
            buildConfigField "String", "UMENG_APPKEY", "\"" + rootProject.ext.develop.UMENG_APPKEY + "\""
            buildConfigField "String", "UMENG_MESSAGE_SECRET", "\"" + rootProject.ext.develop.UMENG_MESSAGE_SECRET + "\""
            buildConfigField "String", "JPUSH_APPKEY", "\"" + rootProject.ext.develop.JPUSH_APPKEY + "\""
            buildConfigField "String", "APP_CHANNEL", "\"" + rootProject.ext.develop.APP_CHANNEL + "\""
            manifestPlaceholders = [
                    'JPUSH_APPKEY': rootProject.ext.develop.JPUSH_KEY,
                    'APP_CHANNEL' : rootProject.ext.develop.APP_CHANNEL,
                    'QQ_APP_ID'   : rootProject.ext.develop.QQ_APP_ID
            ]
        }
        cp33lc {
                    applicationId rootProject.ext.cp33lc.applicationId
                    buildConfigField "String", "API_SERVER", "\"" + rootProject.ext.cp33lc.API_SERVER + "\""
                    buildConfigField "String", "CODE_PUSH_KEY", "\"" + rootProject.ext.global.CODE_PUSH_KEY + "\""
                    buildConfigField "String", "WECHAT_APP_ID", "\"" + rootProject.ext.cp33lc.WECHAT_APP_ID + "\""
                    buildConfigField "String", "WECHAT_APP_SECRET", "\"" + rootProject.ext.cp33lc.WECHAT_APP_SECRET + "\""
                    buildConfigField "String", "QQ_APP_ID", "\"" + rootProject.ext.cp33lc.QQ_APP_ID + "\""
                    buildConfigField "String", "QQ_APP_SECRET", "\"" + rootProject.ext.cp33lc.QQ_APP_SECRET + "\""
                    buildConfigField "String", "QQ_APP_CALLBACK", "\"" + rootProject.ext.cp33lc.QQ_APP_CALLBACK + "\""
                    buildConfigField "String", "SINA_APP_ID", "\"" + rootProject.ext.cp33lc.SINA_APP_ID + "\""
                    buildConfigField "String", "SINA_APP_SECRET", "\"" + rootProject.ext.cp33lc.SINA_APP_SECRET + "\""
                    buildConfigField "String", "SINA_APP_CALLBACK", "\"" + rootProject.ext.cp33lc.SINA_APP_CALLBACK + "\""
                    buildConfigField "String", "UMENG_APPKEY", "\"" + rootProject.ext.cp33lc.UMENG_APPKEY + "\""
                    buildConfigField "String", "UMENG_MESSAGE_SECRET", "\"" + rootProject.ext.cp33lc.UMENG_MESSAGE_SECRET + "\""
                    buildConfigField "String", "JPUSH_APPKEY", "\"" + rootProject.ext.cp33lc.JPUSH_APPKEY + "\""
                    buildConfigField "String", "APP_CHANNEL", "\"" + rootProject.ext.cp33lc.APP_CHANNEL + "\""
                    manifestPlaceholders = [
                            'JPUSH_APPKEY': rootProject.ext.cp33lc.JPUSH_KEY,
                            'APP_CHANNEL' : rootProject.ext.cp33lc.APP_CHANNEL,
                            'QQ_APP_ID'   : rootProject.ext.cp33lc.QQ_APP_ID
                    ]
                }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile project(':push')
    compile project(':umeng')
    compile 'com.meituan.android.walle:library:1.1.5'
    compile project(':jpush-react-native')
    compile project(':jcore-react-native')
    compile project(':react-native-fetch-blob')
    compile project(':react-native-code-push')
    compile project(':react-native-image-picker')
    compile project(':react-native-linear-gradient')
    compile project(':react-native-vector-icons')
    compile fileTree(dir: "libs", include: ["*.jar"])
    compile "com.android.support:appcompat-v7:23.4.0"
    compile "com.facebook.react:react-native:+"  // From node_modules
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
