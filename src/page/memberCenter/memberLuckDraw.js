import React, { Component } from 'react';import {    View,    Text,    Image,    StyleSheet,    TouchableOpacity,    Dimensions,    ScrollView,    Animated,    Platform,    ImageBackground} from 'react-native';import { NavigationActions } from 'react-navigation';import accountService from '../../service/accountService';import { showToast } from '../../utils';import errorHandle from '../../service/errorHandle';import Spinner from 'react-native-spinner';import Header from '../../component/header';import HTMLView from 'react-native-htmlview';import { instructionsService } from '../../service';const { width , height} = Dimensions.get('window');export default class MemberLuckDraw extends Component {    static navigationOptions = ({ navigation }) =>  ({        header: null,    });    constructor(props){        super(props);        this.state = {            isConnecting: false,            isAnimating: false,            content: '',        };        this.prizeList=[];        this.turns = 0;        this.drewTime = 1;        this.result = {};        this.animatedValue = new Animated.Value(0);        this.startAnimation = this.startAnimation.bind(this);        this.onPressHandle = this.onPressHandle.bind(this);        this.navigate = props.navigation.navigate;        this.navigation = props.navigation;        this.headerRight = this.headerRight.bind(this);    };    startAnimation () {        this.toggleSpinner(true);        this.setState({isAnimating: true});        accountService.getDrawResult().then(res => {            this.toggleSpinner(false);            console.log('getDrawResult', res);            this.turns = res.data.luckyId + this.drewTime * 30;            this.result = res.data;            Animated.timing(this.animatedValue, {                toValue: this.turns,                duration: 5000            }).start();           this.drewTime ++ ;        }).catch(err => {            this.setState({                isAnimating: false            });            this.toggleSpinner(false);            this.onErrorHandle(err);        })    };    onErrorHandle (err) {        errorHandle(err).then(res => {            if (res && res.code === 106001) {                this.result.leftTimes = 0            };            if(res && res.routeName) {                const resetActions = NavigationActions.reset({                    index: 0,                    actions: [NavigationActions.navigate({ routeName: res.routeName})]                });                this.props.navigation.dispatch(resetActions);            }        })    };    getPrizeList () {        accountService.getPrizeList().then(res => {            this.setState({                prizeList: res.data.list            })        }).catch(err => {            console.log('getPrizeList',  err);            this.onErrorHandle(err);        })    };    onPressHandle () {        if (this.state.isAnimating) return false;        if (this.result.leftTimes === 0) return showToast('您的抽奖次数已用完');        this.startAnimation();    };    componentWillMount () {        this.getPrizeList();        this.getInstructions();        this.animatedValue.addListener(({value}) => {            if(value === this.turns) {                this.setState({                    isAnimating: false                });                showToast(`恭喜您获得${this.result.luckyName},当前剩余抽奖次数${this.result.leftTimes}`)            }        });    };    onPressRight() {        this.props.navigation.navigate('MemberLuckDrawRecord');    }    headerRight() {        return (            <TouchableOpacity onPress={()=>this.onPressRight()}>                <Text style={{color: '#FFF'}}>                    抽奖记录                </Text>            </TouchableOpacity>        )    }    getInstructions() {        instructionsService({params: { configKey: 'luckyDesc' }})            .then((data) => {                console.log(data)                this.setState({content: data.luckyDesc})            })            .catch((err) => {                console.log(err)            })    }    render () {        let interpolatedAnimation = this.animatedValue.interpolate({            inputRange: [0, 6],            outputRange: ['0deg', '360deg']        });        const {prizeList, isConnecting, isAnimating, content} = this.state;        console.log(content)        return (            <View style={{height:height,backgroundColor:'#eee'}}>                <Header headerTitle = '幸运抽奖'                        headerRight = {this.headerRight}                        navigation = {this.navigation}/>                <ScrollView style={styles.container}>                    <ImageBackground style={styles.myLuckDrawBg} source={require('../../assets/images/my_luck_draw_bg.png')}>                        <ImageBackground style={styles.turnTable} source={require('../../assets/images/my_luck_draw_trunTable.png')}>                            <View style={styles.prizeList}>                                {prizeList && prizeList.length > 0 && prizeList.map((item, index) => {                                    return (                                        <Text key={item.luckyId}                                              style={[styles.prizeItem, styles[`prizeItem_${index}`]]}>                                            {item.luckyName}                                        </Text>                                    )                                })}                            </View>                            <TouchableOpacity activeOpacity={isAnimating ? 1 : 0.2}                                              onPress={() => {this.onPressHandle()}}>                                <Animated.Image                                    style={[                                        styles.myLuckDrawBtn,                                        {transform: [                                            {rotate: interpolatedAnimation}                                        ]}                                    ]}                                    source={require('../../assets/images/my_luck_draw_btn.png')}/>                            </TouchableOpacity>                        </ImageBackground>                    </ImageBackground>                    {!!content ? (                        <View style={styles.tipBox}>                            <Text style={styles.title}>抽奖规则</Text>                            <HTMLView value = {content} stylesheet={styles}/>                        </View>                    ) : (                        <Text style={styles.tip}>暂无数据</Text>                    )}                    <Spinner visible={isConnecting}                             color="#FFF"                             overlayColor="transparent"                             textStyle={{color: '#FFF', fontSize: 16}} />                </ScrollView>            </View>        )    };    toggleSpinner (status) {        this.setState({            isConnecting: status !== undefined ? status : !this.state.isConnecting        });    };}const styles = StyleSheet.create({    container: {        flex: 1,        backgroundColor: '#FF3232',        height: height    },    myLuckDrawBg: {        flexDirection: 'row',        justifyContent: 'center',        width: width,        height: 385,    },    myLuckDrawBtn: {        width: 70,        height: 70,    },    tipBox: {        paddingTop: 10,        paddingBottom: 30,        paddingHorizontal: 30,    },    title: {        fontSize: 16,        color: '#FFF',        marginBottom: 10,    },    tips: {        color: '#FFF',        marginBottom: 5,        fontSize: 14,    },    turnTable: {        flexDirection: 'row',        justifyContent: 'center',        alignItems: 'center',        marginTop:30,        width:260,        height: 260,    },    prizeList: {        flexDirection: 'row',        justifyContent: 'center',        alignItems: 'center',        marginTop:30,        width:260,        height: 250,        position: 'absolute'    },    prizeItem: {        backgroundColor: 'transparent',        color: '#FFF',        fontSize: 14,        fontWeight: 'bold',        position: 'absolute',        width: 60,    },    prizeItem_0: {        top: 65,        right: 58,        transform:[{rotate:'30deg'}]    },    prizeItem_1: {        top: 125,        right: 35,        transform:[{rotate:'90deg'}]    },    prizeItem_2: {        top: 175,        right: 70,        transform:[{rotate:'150deg'}]    },    prizeItem_3: {        top: 170,        left: 60,        transform:[{rotate:'-150deg'}]    },    prizeItem_4: {        top: 110,        left: 35,        transform:[{rotate:'-90deg'}]    },    prizeItem_5: {        top: 60,        left: 68,        transform:[{rotate:'-30deg'}]    },    image: {        width: 12,        height: 20,        marginRight: 22,        marginVertical: 12,        resizeMode: 'contain',        tintColor: '#FFF',    },    tip: {        fontSize: 16,        color: '#FFFFFF',        textAlign: 'center',        marginTop: 30,    },    p: {        lineHeight: 25,        fontSize: 14,        color: '#FFFFFF',        marginVertical: 12,    }})