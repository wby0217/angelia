import React, { Component } from 'react';import {    StyleSheet,    Text,    View,    Dimensions,    TouchableOpacity,    Animated,    Easing,    Platform} from 'react-native';import Icon from 'react-native-vector-icons/FontAwesome';import lang from '../../../../config/lang'import PlaySettings from './playSettings'import PlayRef from './playRef';import { saveMenuSetting } from '../../../../service';import { observer, inject } from 'mobx-react/native';import Spinner from 'react-native-spinner';import { betStore } from '../../../../store';import {showToast} from "../../../../utils/index";const isIos = Platform.OS === 'ios';inject('betStore')observerconst { width } = Dimensions.get('window');export default class DrawerPanel extends Component {    constructor(props){        super(props);        this.state = {            isConnecting: false        };        this.animatedValue = new Animated.Value(0);        this.toggleSlide = this.toggleSlide.bind(this);    }    toggleSlide (status) {        const setVal = status ? 0 : 1;        const toVal = status ? 1 : 0;        this.animatedValue.setValue(setVal);        Animated.timing(            this.animatedValue,            {                toValue: toVal,                duration: 300,                easing: Easing.ease            }        ).start()    }    onPressAchieveSort() {        const { lotteryId } = this.props;        const content = this.playSettings.exportPlayListOrder().join(',');        this.setState({isConnecting: true});        saveMenuSetting({lotteryId, content})            .then(() => betStore.fetchPlayList())            .then(() => {                this.setState({isConnecting: false}, () => {                    showToast('保存成功!')                })            })            .then(() => {                if (!isIos) { betStore.betPanelStatus = false }            })            .catch((err) => {                this.setState({isConnecting: false}, () => {                    showToast(err.message)                });            })    }    render () {        const movingLeft = this.animatedValue.interpolate({            inputRange: [0, 1],            outputRange: [-width, 0]        });        const { content, lotteryId, playList } = this.props;        const { isConnecting } = this.state;        return (            <Animated.View style={[styles.container, {left: movingLeft}]}>                <View style={[styles.header, styles.center]}>                    <TouchableOpacity                        style={{width:60, paddingHorizontal: 10}}                        onPress={() => {this.toggleSlide(false)}}>                        <Icon name="angle-left" size={24} color="#959595" />                    </TouchableOpacity>                    <View style={[{flex: 1}, styles.center]}>                        <Text style={{color:'#333'}}>{ lang[content] }</Text>                    </View>                    {content === "PLAY_SETTINGS" ? (                        <TouchableOpacity                            onPress={() => {this.onPressAchieveSort()}}                            style={styles.headerRight}>                            <Text style={{color:'#EC0909'}}>完成</Text>                        </TouchableOpacity>                    ) : <View style={styles.headerRight} />}                </View>                { content === "PLAY_SETTINGS" && (                    <PlaySettings                        ref={(playSettings) => this.playSettings = playSettings}                        playList={playList}                    />                )}                { content === "PLAY_REF" &&  <PlayRef lotteryId={lotteryId} /> }                <Spinner visible={isConnecting}                         color="#333"                         overlayColor="transparent"                         textContent={"正在加载"}                         textStyle={{color: '#333', fontSize: 16}} />            </Animated.View>        )    }}const styles = StyleSheet.create({    container: {        height: 460,        width: width,        position:'absolute',        backgroundColor:"#FFF",        overflow: 'hidden',    },    center: {        alignItems:'center',        justifyContent: 'center'    },    header: {        flexDirection: 'row',        height:40,        borderBottomColor: '#DDD',        borderBottomWidth: StyleSheet.hairlineWidth,        shadowColor: '#000',        shadowOffset: {width: 0, height: 2},        shadowOpacity: 0.2,        shadowRadius: 2,        marginBottom: 2,    },    headerRight: {        width:60,        paddingHorizontal: 10    }});