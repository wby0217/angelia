import React, { Component } from 'react';import {    View,    Text,    Image,    TextInput,    StyleSheet,    TouchableOpacity,    TouchableWithoutFeedback,    Dimensions} from 'react-native';import Icon from 'react-native-vector-icons/FontAwesome';import AppButton from '../../component/appButton';import memberService from '../../service/memberService';import errorHandle from '../../service/errorHandle';import Spinner from 'react-native-spinner';import { showToast, verification } from '../../utils';import { memberFormStyles } from '../../assets/style';import Header from '../../component/header';const styles = memberFormStyles;export default class ModifyPassword extends Component {    static navigationOptions = {        header: null    };    constructor(props) {        super(props);        this.state = {            isConnecting: false,            oldPassword: '',            newPassword: '',            reNewPassword: '',            isCanSubmit: false        }        this.toggleSpinner = this.toggleSpinner.bind(this);        this.submitForm = this.submitForm.bind(this);        this.navigate = props.navigation.navigate;        this.goBack = props.navigation.goBack;        this.navigation = props.navigation;    };    setButtonStatus () {        this.setState({            isCanSubmit: (!!this.state.oldPassword && !!this.state.newPassword && !!this.state.reNewPassword)        })    };    toggleSpinner (status) {        this.setState({            isConnecting: status !== undefined ? status : !this.state.isConnecting        });    };    submitForm () {        const data = {            password: this.state.oldPassword,            newPassword: this.state.newPassword        };        const validate = verification(data);        if (validate === 'success') {            if(this.state.newPassword === this.state.reNewPassword) {                const params = {                    oldPassword: this.state.oldPassword,                    newPassword: this.state.newPassword                };                this.toggleSpinner(true);                memberService.modifyPassword(params)                    .then(res => {                        this.toggleSpinner(false);                        showToast(res.message, {                            onHide: () => {                                this.goBack()                            }                        });                    }).catch(err => {                    this.toggleSpinner(false);                    console.log(err)                    errorHandle(err).then(res => {                        res && res.routeName && this.navigate(res.routeName)                    })                })            } else {                showToast('两次输入的密码不一致，请重新输入');            }        }    };    componentWillMount () {    };    render () {        const { oldPassword, newPassword,  reNewPassword, isConnecting, isCanSubmit} = this.state;        return (            <View style={styles.container}>                <Header headerTitle = '修改密码'                        navigation = {this.navigation}/>                <View style={styles.inputFile}>                    <Icon iconStyle={styles.inputIcon} width={24} name="lock" size={24} color={'#C9C9C9'}/>                    <TextInput style={styles.inputText}                               placeholder="请输入原登录密码"                               autoCapitalize={"none"}                               value={oldPassword}                               secureTextEntry={true}                               maxLength={12}                               autoFocus                               underlineColorAndroid='transparent'                               onChangeText={(text) => {                                   this.setState({                                       oldPassword: text                                   }, () => {                                       this.setButtonStatus()                                   })                               }}/>                </View>                <View style={styles.inputFile}>                    <Icon iconStyle={styles.inputIcon} width={24} name="lock" size={24} color={'#C9C9C9'}/>                    <TextInput style={styles.inputText}                               placeholder="请输入新的登录密码"                               autoCapitalize={"none"}                               value={newPassword}                               secureTextEntry={true}                               maxLength={12}                               underlineColorAndroid='transparent'                               onChangeText={(text) => {                                   this.setState({                                       newPassword: text                                   }, () => {                                       this.setButtonStatus()                                   })                               }}/>                </View>                <View style={styles.inputFile}>                    <Icon iconStyle={styles.inputIcon} width={24} name="lock" size={24} color={'#C9C9C9'}/>                    <TextInput style={styles.inputText}                               placeholder="请再次输入新的登录密码"                               autoCapitalize={"none"}                               value={reNewPassword}                               secureTextEntry={true}                               maxLength={12}                               underlineColorAndroid='transparent'                               onChangeText={(text) => {                                   this.setState({                                       reNewPassword: text                                   }, () => {                                       this.setButtonStatus()                                   })                               }}/>                </View>                <AppButton                    style={styles.appBtn}                    title="确认"                    isDisabled={!isCanSubmit}                    onPressHandle={() => {                        this.submitForm();                    }}                />                <View style={{ flex: 1 }}>                    <Spinner visible={isConnecting}                             color="#333"                             overlayColor="transparent"                             textContent={"正在加载"}                             textStyle={{color: '#333', fontSize: 16}} />                </View>            </View>        )    };    componentWillUnmount () {        if(this.timer){            this.resetCountdown();        }    };}