import React, { Component } from 'react';import {    View,    Text,    FlatList,    TouchableOpacity,} from 'react-native';import { listStyles, recordStyle } from '../../../assets/style';import LoadMoreFooter from '../../../component/loadMoreFooter';import errorHandle from '../../../service/errorHandle';import accountService from '../../../service/accountService';const styles = listStyles;const record = recordStyle;export default class LosingPrize extends Component {    constructor(props){        super(props);        this.state ={            isLoadingMore: false,            isRefreshing: false,            isFetching: false,            dataSource: [],        };        this.prizeStatus = 3;        this.lotteryId = '';        this.startTime = '';        this.endTime = '';        this.currentPage = 0;        this.size = 20;        this.renderTableRow = this.renderTableRow.bind(this);        this.renderLoadMore = this.renderLoadMore.bind(this);        this.loadMore = this.loadMore.bind(this);        this.onRefreshTable = this.onRefreshTable.bind(this);        this.entryOrderDetail = this.entryOrderDetail.bind(this);        this.navigate = props.navigation.navigate;    };    entryOrderDetail (item) {        this.navigate('GameRecordDetail', {orderId: item.id });    };    renderTableRow({ item }){        return(            <TouchableOpacity style={record.rowBox} onPress={() => this.entryOrderDetail(item)}>                <View style={record.flexBox}>                    <View style={record.InfoLeftItem}>                        <Text style={record.info}>{item.lotteryName}</Text>                    </View>                    <View style={record.InfoLeftItem}>                        <Text style={record.minorInfo}>{item.issueNo}期</Text>                    </View>                </View>                <View style={record.flexBox}>                    <View style={record.InfoRightItem}>                        <Text style={record.info}>{item.prizeStatus}</Text>                    </View>                    <View style={record.InfoRightItem}>                        <Text style={record.minorInfo}>投注 {item.betAmount} 元</Text>                    </View>                </View>            </TouchableOpacity>        )    };    renderLoadMore () {        const { dataSource, isLoadingMore } = this.state;        return <LoadMoreFooter itemLength={dataSource.length} isLoadAll={isLoadingMore}/>;    };    componentWillReceiveProps (nextProps) {        const filters = nextProps.filters;        console.log(filters);        this.currentPage = 1;        if (filters.startTime) { this.startTime = filters.startTime }        if (filters.endTime) { this.endTime = filters.endTime }        if (filters.lotteryId) { this.lotteryId = filters.lotteryId }        this.fetchRecord();    };    render () {        const { dataSource, isRefreshing } = this.state;        return (            <View style={styles.container}>                <FlatList style={{flex: 1,marginTop: 10}}                          data={dataSource}                          onEndReachedThreshold={0.5}                          onEndReached = {() => this.loadMore()}                          keyExtractor={(item, index) => index}                          renderItem={(rowData) => this.renderTableRow(rowData)}                          ListFooterComponent={() => this.renderLoadMore()}                          refreshing= {isRefreshing}                          onRefresh={ this.onRefreshTable.bind(this) }                />            </View>        )    };    onRefreshTable () {        this.currentPage = 1;        this.setState({            isRefreshing: true,            isLoadingMore: true,        }, () => {            this.fetchRecord()        })    };    loadMore () {        if (this.state.isFetching) return false;        this.setState({            isLoadingMore: false        }, () => {            this.currentPage ++ ;            this.fetchRecord();        });    };    onErrorHandle (err) {        errorHandle(err).then(res => {            if(res && res.routeName){                this.navigate(res.routeName);            }        })    };    fetchRecord () {        this.setState({            isFetching: true,        });        const data = {            size: this.size,            page: this.currentPage,        };        if (this.startTime) { data.startTime = this.startTime };        if (this.endTime) {data.endTime = this.endTime};        if (this.lotteryId) {data.lotteryId = this.lotteryId};        if (this.prizeStatus) {data.prizeStatus = this.prizeStatus};        console.log(data);        if (this.totalPage && data.page > this.totalPage) {            this.setState({                isLoadingMore: true,            })            return false;        }        console.log('this.currentPage', this.currentPage);        accountService.getOrderList(data).then(res => {            this.totalPage = res.data.totalPage;            if(res.data.totalNum === 0) {                this.setState ({                    isRefreshing: false,                    isLoadingMore: true,                    isFetching: false,                    dataSource: this.currentPage === 1 ? [] : this.state.dataSource                });            } else {                this.setState({                    isRefreshing: false,                    isFetching: false,                    isLoadingMore: true,                    dataSource: this.currentPage === 1 ? res.data.list : [...this.state.dataSource, ...res.data.list]                });            }        }).catch(err => {            console.log(err);            this.setState ({                isFetching: false,                isRefreshing: false,                isLoadingMore: true            });            this.onErrorHandle(err);        });    };}