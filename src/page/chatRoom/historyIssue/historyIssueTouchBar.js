import React, { Component } from 'react';import {    StyleSheet,    Text,    View,    Image,    TouchableOpacity,} from 'react-native';import Icon from 'react-native-vector-icons/FontAwesome';import lhcConfig from '../../../config/lhcConfig'import { observer, inject } from 'mobx-react/native';import { betStore } from '../../../store';@observerexport default class HistoryIssueTouchBar extends Component {    constructor(props){        super(props);        this.renderIssueBar = this.renderIssueBar.bind(this);        this.getIconPath = this.getIconPath.bind(this);    }    getLocation () {        const { onPress } = this.props;        this.issueBar.measure((fx, fy, width, height, px, py) => {            !!onPress && onPress({                pageX: px,                pageY: py + height,            })        });    }    getIconPath (item) {        switch (item) {            case 1:                return require('../../../assets/images/dice_1.png');            case 2:                return require('../../../assets/images/dice_2.png');            case 3:                return require('../../../assets/images/dice_3.png');            case 4:                return require('../../../assets/images/dice_4.png');            case 5:                return require('../../../assets/images/dice_5.png');            case 6:                return require('../../../assets/images/dice_6.png');        }    };    renderIssueBar (issueList) {        const { categoryId } = this.props;        const len = issueList[0].prizeNum.length;        switch (categoryId) {                case 1: //时时彩                case 3: //幸运28                case 5: //11选5                    return (                        <View style={styles.issueResult}>                            {issueList[0].prizeNum.map((item, index) => {                                return (                                    <View key={index} style={{flexDirection:'row'}}>                                        <View style={styles.resultItem} key={index}>                                            <Text style={styles.resultTextOfSSC}>                                                {item}                                            </Text>                                        </View>                                        <Text style={styles.graySym}>                                            {index < len - 2 ? ' + ' : index === len-2 && ' = '}                                        </Text>                                    </View>                                )                            })}                        </View>                    );            case 4: //快3                    return (                        <View style={styles.issueResult}>                            {issueList[0].prizeNum.map((item, index) => {                                return (                                    <View key={index}  style={{flexDirection:'row'}}>                                        {                                            index < len - 1 ?                                                <Image style={styles.iconStyle} source={this.getIconPath(item)}/>                                                :                                                <Text style={styles.resultTextOfPK10}>{item}</Text>                                        }                                        <Text style={styles.graySym}>                                            {index < len - 2 ? ' + ' : index === len-2 && ' = '}                                        </Text>                                    </View>                                )                            })}                        </View>                    );            case 2:                return (                    <View style={styles.issueResult}>                        {issueList[0].prizeNum.map((item, index )=> {                            return (                                <Text key={index}                                      style={[styles.resultTextOfPK10, index===len-1 && {color: '#0076FF'}]}>                                    {item}                                </Text>                            )                        })}                    </View>                );            case 6:                return (                    <View style={styles.issueResult}>                        {issueList[0].prizeNum.map((item, index )=> {                            if ( index > 6) return null;                            const itemStr = item.toString().length < 2 ? `0${item.toString()}` : item.toString();                            return (                                <View key={index} style={{flexDirection: 'row'}}>                                    {index === 6 && <Text style={styles.lhcSym}>+</Text>}                                    <View style={styles.lhcWrp}>                                        <View style={[styles.lhcBall, styles[lhcConfig.number[itemStr]]]}>                                            <Text style={styles.lhcNum}>                                                {itemStr}                                            </Text>                                        </View>                                        <Text style={styles.lhcZoc}>{issueList[0].prizeZodiac[index]}</Text>                                    </View>                                </View>                            )                        })}                    </View>                );            default: //2 :pk10                return (                    <View style={styles.issueResult}>                        {issueList[0].prizeNum.map((item, index )=> {                            return (                                <Text key={index} style={styles.resultTextOfPK10}>{item}</Text>                            )                        })}                    </View>                );            }    }    render () {        const { issueList } = betStore;        if (issueList.length > 0) {            return (                <TouchableOpacity ref={(ref) => {this.issueBar = ref}}                                  style={styles.issueItem}                                  onPress={() => this.getLocation()}>                    <Text style={styles.fontColor}>{`第 ${issueList[0].issueNo} 期`}</Text>                    {this.renderIssueBar(issueList)}                    <Icon name="angle-down" size={18}/>                </TouchableOpacity>            )        } else {            return (                <View style={styles.issueItem}>                    <Text>暂无彩期</Text>                </View>            )        }    }}const styles = StyleSheet.create({    issueItem: {        flexDirection: 'row',        height: 38,        backgroundColor: '#FFF',        paddingHorizontal: 10,        justifyContent: 'flex-start',        alignItems: 'center',        borderBottomWidth: StyleSheet.hairlineWidth,        borderBottomColor: '#E9E8E8'    },    issueResult: {        flexDirection: 'row',        flex: 1,        paddingHorizontal:10,    },    resultItem: {        backgroundColor: '#DF2214',        justifyContent: 'center',        alignItems: 'center',        width: 18,        height: 18,        borderRadius: 9,    },    resultTextOfSSC: {        color: '#FFF',        fontSize: 10,    },    resultTextOfPK10: {        color: '#EC0909',        paddingHorizontal: 5    },    iconStyle: {        width: 19, height: 19    },    red: {        backgroundColor: '#EF2525'    },    green: {        backgroundColor: '#38BE4F'    },    blue: {        backgroundColor: '#0E86E3'    },    lhcWrp: {        flexDirection: 'column',        marginHorizontal: 5    },    lhcBall: {        width: 18,        height: 18,        borderRadius: 9,        alignItems: 'center',        justifyContent: 'center',        overflow: 'hidden',    },    lhcNum: {        alignSelf: 'center',        color: '#FFF',        fontSize: 10    },    lhcZoc: {        fontSize: 10,        color: '#9AA5BC',        alignSelf: 'center',        lineHeight: 14,    },    lhcSym: {        fontSize: 22,        fontWeight: 'bold',        color: '#B0B9C9',        lineHeight: 22,    },    fontColor: {        color: '#606060',    }});