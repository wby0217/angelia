import React, { Component } from 'react';import {    View,    Text,    FlatList,    RefreshControl} from 'react-native';import { NavigationActions } from 'react-navigation';import LoadMoreFooter from '../../component/loadMoreFooter';import accountService from '../../service/accountService';import { listStyles } from '../../assets/style'import errorHandle from '../../service/errorHandle'import Header from '../../component/header';const styles = listStyles;export default class MemberLuckDrawRecord extends Component {    static navigationOptions = ({ navigation }) =>  ({        header: null    });    constructor(props){        super(props);        this.state = {            isLoadingMore: false,            isRefreshing: false,            isFetching: false,            dataSource: [],            isConnecting: false,        };        this.currentPage = 0;        this.size = 20;        this.renderTableRow = this.renderTableRow.bind(this);        this.renderLoadMore = this.renderLoadMore.bind(this);        this.loadMore = this.loadMore.bind(this);        this.onRefreshTable = this.onRefreshTable.bind(this);        this.navigate = props.navigation.navigate;        this.navigation = props.navigation;    }    renderTableRow ({item ,index}) {        return (            <View style={[styles.tableRow, {backgroundColor: index%2 === 0 ? '#F7F7F7' : '#FFF'}]} key={index}>                <View  style={styles.tableCell}>                    <Text style={{color: '#DD1B00'}}>{item.amount}元</Text>                </View>                <View  style={[styles.tableCell, {flex: 2}]}>                    <Text style={{color: '#2F2F2F'}}>{item.datetime}</Text>                </View>                <View  style={styles.tableCell}>                    <Text  style={{color: '#2F2F2F'}}>{item.luckyName}</Text></View>            </View>        )    }    renderLoadMore () {        return <LoadMoreFooter isLoadAll={this.state.isLoadingMore}/>;    };    renderListHeader () {        return  (            <View style={styles.header}>                <View  style={styles.tableCell}>                    <Text style={styles.headerTextColor}>红包金额</Text>                </View>                <View  style={[styles.tableCell, {flex: 2}]}>                    <Text style={styles.headerTextColor}>抽奖时间</Text>                </View>                <View  style={styles.tableCell}>                    <Text  style={styles.headerTextColor}>中奖红包</Text>                </View>            </View>        )    };    render () {        const { dataSource, isRefreshing } = this.state;        return (            <View style={styles.container}>                <Header headerTitle = '幸运抽奖'                        navigation = {this.navigation}/>                {this.renderListHeader() }                <FlatList style={{flex: 1}}                          data={dataSource}                          onEndReachedThreshold={0.5}                          onEndReached = {() => this.loadMore()}                          renderItem={(rowData) => this.renderTableRow(rowData)}                          ListFooterComponent={() => this.renderLoadMore()}                          refreshing= {isRefreshing}                          onRefresh={ this.onRefreshTable.bind(this) }                />            </View>        )    };    onRefreshTable () {        this.currentPage = 1;        this.setState({            isRefreshing: true,            isLoadingMore: true,        }, () => {            this.fetchRecord()        })    };    loadMore () {        if (this.state.isFetching) return false;        this.setState({            isLoadingMore: false        }, () => {            this.currentPage ++ ;            this.fetchRecord();        });    };    onErrorHandle (err) {        errorHandle(err).then(res => {            if(res && res.routeName){                const resetActions = NavigationActions.reset({                    index: 0,                    actions: [NavigationActions.navigate({ routeName: res.routeName})]                });                this.props.navigation.dispatch(resetActions);            }        })    };    fetchRecord () {        this.setState({            isFetching: true,        });        const data = {            size: this.size,            page: this.currentPage,        };        if (this.startTime) { data.startTime = this.startTime };        if (this.endTime) {data.endTime = this.endTime};        console.log(data);        if (this.totalPage && data.page > this.totalPage) {            this.setState({                isLoadingMore: true,            })            return false;        }        accountService.getLuckDrawRecord(data).then(res => {            console.log('getLuckDrawRecord', res);            this.totalPage = res.data.totalPage;            if(res.data.totalNum === 0) {                this.setState ({                    isRefreshing: false,                    isLoadingMore: true,                    isFetching: false,                    dataSource: this.currentPage === 1 ? [] : this.state.dataSource                });            } else {                this.setState({                    isRefreshing: false,                    isFetching: false,                    isLoadingMore: true,                    dataSource: this.currentPage === 1 ? res.data.list : [...this.state.dataSource, ...res.data.list]                });            }        }).catch(err => {            console.log(err);            this.setState ({                isRefreshing: false,                isLoadingMore: true,                isFetching: false,            });            this.onErrorHandle(err);        });    };}