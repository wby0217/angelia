import React, { Component } from 'react';import {    View,    Text,    StyleSheet,    Dimensions,    TouchableWithoutFeedback,    Platform,    TouchableOpacity,    NativeAppEventEmitter,    DeviceEventEmitter,    Animated,    NativeModules} from 'react-native';import Icon from 'react-native-vector-icons/FontAwesome';import moment from 'moment';import DatePicker from 'react-native-datepicker';import AppDatePicker from './appDatePicker';import AppPicker from './appPicker';import AppButton from '../appButton';const isIos = Platform.OS === 'ios';const isIPhoneX = NativeModules.DeviceInfo.isIPhoneX_deprecated;export default class FilterBox extends Component {    constructor(props){        super(props);        this.state = {            isOpenDatePicker: false,            isOpenAppPicker: false,            date: '',            startTime: '',            endTime: '',            lotteryId: '',            lotteryName: '',            dateType: 'start' ,        };        this.getDate = this.getDate.bind(this);        this.getStartDate = this.getStartDate.bind(this);        this.getEndDate = this.getEndDate.bind(this);        this.closeFilterBar = this.closeFilterBar.bind(this);        this.openAppPicker = this.openAppPicker.bind(this);        this.closeAppPicker = this.closeAppPicker.bind(this);        this.submitFilter = this.submitFilter.bind(this);    };    getDate (date){        if (this.state.dateType === 'start') {            this.setState({                startTime: moment(date).format('YYYY-MM-DD'),                isOpenDatePicker: false            })        } else {            this.setState({                endTime: moment(date).format('YYYY-MM-DD'),                isOpenDatePicker: false            })        }    };    openAppPicker () {        this.setState({            isOpenAppPicker: true        })    };    closeFilterBar (){        this.props.onClosehandle && this.props.onClosehandle();    };    getStartDate(date) {        this.setState({            startTime: date        })    }    getEndDate(date) {        this.setState({            endTime: date        })    }    closeAppPicker (id) {        if(typeof id === 'undefined'){            this.setState({                isOpenAppPicker: false            })        }else {            this.setState({                lotteryId: this.props.list[id].LotteryId,                lotteryName: this.props.list[id].LotteryName,                isOpenAppPicker: false            })        }    };    renderMasker () {        return (            <TouchableWithoutFeedback onPress={this.closeFilterBar}>                <Animated.View style={[styles.absolute, styles.masker]}>                    <View style={styles.absolute}/>                </Animated.View>            </TouchableWithoutFeedback>        )    };    submitFilter() {        const data = {            startTime: this.state.startTime,            endTime: this.state.endTime,            lotteryId: this.state.lotteryId,        }        this.props.onSubmitHandle && this.props.onSubmitHandle(data);    };    componentDidMount (){    };    render () {        const { startTime, endTime, isOpenDatePicker, lotteryName, isOpenAppPicker} = this.state;        const masker = this.renderMasker();        if (!this.props.isOpenFilterBar) return <View />;        return (            <View style={[styles.fiterWrap, styles.absolute]} pointerEvents="box-none">                { masker }                <Animated.View style={styles.filterBox} ref="filterBox">                    <View style={{flexDirection: 'row', marginBottom: 10}}>                        <TouchableOpacity style={styles.filterItem} >                            <Icon name="calendar" size={18} color="#900" />                            <DatePicker                                mode="date"                                format="YYYY-MM-DD"                                customStyles={{                                    dateIcon: { display: 'none' },                                    dateInput: { borderWidth: 0,height:30,marginLeft:6,alignItems:'flex-start'}                                }}                                onDateChange={this.getStartDate}                                placeholder="请选择开始时间"                                date= {startTime}                            />                        </TouchableOpacity>                        <TouchableOpacity style={styles.filterItem}>                            <Icon name="calendar" size={18} color="#900" />                            <DatePicker                                mode="date"                                format="YYYY-MM-DD"                                customStyles={{                                    dateIcon: { display: 'none' },                                    dateInput: { borderWidth: 0,height:30,marginLeft:6,alignItems:'flex-start'}                                }}                                onDateChange={this.getEndDate}                                placeholder="请选择结束时间"                                date= {endTime}                            />                        </TouchableOpacity>                    </View>                    <View style={{flexDirection: 'row'}}>                        {                            this.props.isShowAppPick ? (                                <TouchableOpacity style={styles.filterItem} onPress={() => { this.openAppPicker()}}>                                    <Icon name="gamepad" size={18} color="#900" />                                    <Text style={[styles.inputText, {color: lotteryName ? '#333' : '#c9c9c9'}]}>                                        { lotteryName ? lotteryName : '请选择游戏'}                                    </Text>                                </TouchableOpacity>                            ) : (<View style={[styles.filterItem, {borderColor: 'transparent'}]} />)                        }                        <AppButton style={styles.filterBtn} title="确定" onPressHandle={this.submitFilter}/>                    </View>                </Animated.View>                <AppDatePicker isOpen={isOpenDatePicker}                               onCloseHandle={this.getDate}                               maxDate={this.props.maxDate}/>                <AppPicker isOpen={isOpenAppPicker}                           onCloseHandle={this.closeAppPicker}                            list={this.props.list}                           listItemLabel ={this.props.listItemLabel}                           listItemValue={this.props.listItemValue} />            </View>        )    }}const { width, height } = Dimensions.get('window');const styles = StyleSheet.create({    absolute: {        position: 'absolute',        top: isIos ? (isIPhoneX ? 74 : 64) : 54,        left: 0,        bottom: 0,        right: 0,        zIndex: 99,    },    masker: {        backgroundColor: 'rgba(0, 0, 0, 0.3)',        width: width,        height: height    },    fiterWrap: {        width: width,        height: height,    },    filterBox: {        position: 'absolute',        top:0,        left: 0,        zIndex: 100,        width: width,        flexDirection: 'column',        alignItems: 'center',        justifyContent: 'center',        backgroundColor: '#FFF',        paddingVertical: 15,        paddingHorizontal: 10,    },    filterItem: {        flex: 1,        flexDirection: 'row',        alignItems: 'center',        justifyContent: 'flex-start',        borderWidth: StyleSheet.hairlineWidth,        borderColor: '#E5E5E5',        paddingHorizontal: 5,        marginHorizontal: 5,        width: (width-40)/2,        height: 30    },    inputText: {        fontSize: 14,        marginLeft: 5,    },    filterBtn: {        width: (width - 40)/2,        marginHorizontal: 5,        height: 30,    }})