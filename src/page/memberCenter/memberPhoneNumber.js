import React, { Component } from 'react';import {    View,    Text,    Image,    TextInput,    StyleSheet,    TouchableOpacity,    TouchableWithoutFeedback,    Dimensions} from 'react-native';import Icon from 'react-native-vector-icons/FontAwesome';import { NavigationActions } from 'react-navigation';import AppButton from '../../component/appButton';import memberService from '../../service/memberService';import Spinner from 'react-native-spinner';import errorHandle from '../../service/errorHandle';import { showToast, verification } from '../../utils';import { memberFormStyles } from '../../assets/style';import config from '../../config';import Header from '../../component/header';const styles = memberFormStyles;const countdownTime = config.connect.countdownTime;export default class MemberPhoneNumber extends Component {    static navigationOptions = {        header: null    };    constructor(props) {        super(props);        this.state = {            telephone: '',            messageCode: '',            isCanSubmit: false,            countdown: countdownTime,            isConnecting: false,            isStartCountdown: false        };        this.navigate = props.navigation.navigate;        this.goBack = props.navigation.goBack;        this.sendCode = this.sendCode.bind(this);        this.setButtonStatus = this.setButtonStatus.bind(this);        this.submitForm = this.submitForm.bind(this);        this.navigation = props.navigation;    };    setButtonStatus () {        this.setState({            isCanSubmit: (this.state.telephone && this.state.messageCode)        })    };    toggleSpinner (status) {        this.setState({            isConnecting: status !== undefined ? status : !this.state.isConnecting        });    };    resetCountdown () {        clearInterval(this.timer);        this.setState({            isStartCountdown: false,            countdown: countdownTime        })    };    countdown () {        if(this.timer) {            this.resetCountdown();        };        this.setState({            isStartCountdown: true        })        this.timer = setInterval(()=>{            if(this.state.countdown > 0) {                this.setState({                    countdown: this.state.countdown - 1                })            } else {                this.resetCountdown();            }        }, 1000)    };    sendCode () {        const data = {telephone: this.state.telephone};        const validate = verification(data);        if( this.state.telephone === '' ) {            return showToast('手机号码不能为空');        }        if( validate === 'success'){            this.toggleSpinner(true);            memberService.sendCode(data).then(res => {                this.toggleSpinner();                showToast(res.message, {onShown: ()=>this.countdown()});            }).catch(err => {                this.toggleSpinner();                showToast(err.message, {onHide: () => errorHandle(err.code)});            })        }    };    async submitForm () {        this.toggleSpinner(true);        const data = {            telephone: this.state.telephone,            messageCode: this.state.messageCode,        };        const validate = verification(data);        if(validate === 'success'){            memberService.bindPhone(data)                .then(res => {                    this.toggleSpinner(false);                    showToast(res.message)                })                .then(() => memberService.fetchUserInfo())                .then(() => this.goBack())                .catch(err => {                    this.toggleSpinner(false);                    errorHandle(err).then(res => {                        if(res && res.routeName){                            const resetActions = NavigationActions.reset({                                index: 0,                                actions: [NavigationActions.navigate({ routeName: res.routeName})]                            });                            this.props.navigation.dispatch(resetActions);                        }                    })                })        } else {            this.toggleSpinner(false);        }    };    componentWillMount () {        storage.load({key: 'userInfo'}).then(res => {            this.setState({                ...res,            })        })    };    render () {        let {telephone, messageCode, isCanSubmit, isStartCountdown, countdown} = this.state;        return (            <View style={styles.container}>                <Header headerTitle = '手机绑定'                        navigation = {this.navigation}/>                <View style={styles.inputFile}>                    <Icon iconStyle={styles.inputIcon} width={30} name="mobile" size={28} color={'#C9C9C9'}/>                    <TextInput style={styles.inputText}                               placeholder="请输入您的手机号码"                               autoCapitalize={"none"}                               keyboardType={"numeric"}                               maxLength={11}                               value={telephone}                               autoFocus                               underlineColorAndroid='transparent'                               onChangeText={(text) => {                                   this.setState({                                       telephone: text                                   }, () => {                                       this.setButtonStatus()                                   })                               }}/>                </View>                <View style={styles.inputFile}>                    <Icon name="envelope-o" size={16} color={'#C9C9C9'}/>                    <TextInput  style={styles.inputText}                                value={messageCode}                                placeholder="请输入短信验证吗"                                autoCapitalize={"none"}                                keyboardType={"numeric"}                                underlineColorAndroid='transparent'                                onChangeText={(text) => {                                    this.setState({                                        messageCode: text                                    }, () => {                                        this.setButtonStatus()                                    })                                }}/>                    { !isStartCountdown ? (                        <TouchableOpacity style={styles.messCaptcha} onPress={this.sendCode}>                            <Text style={styles.textBtn}>获取验证码</Text>                        </TouchableOpacity>                    ) : (                        <View style={{paddingLeft: 10}}>                            <Text style={{fontSize: 14, color: '#999'}}>{`${countdown}s后重新获取`}</Text>                        </View>                    )                    }                </View>                <AppButton                    style={styles.appBtn}                    title="确认绑定"                    isDisabled={!isCanSubmit}                    onPressHandle={() => {                        this.submitForm();                    }}                />                <View style={{ flex: 1 }}>                    <Spinner visible={this.state.isConnecting}                             color="#333"                             overlayColor="transparent"                             textContent={"正在加载"}                             textStyle={{color: '#333', fontSize: 16}} />                </View>            </View>        )    };    componentWillUnmount () {        if(this.timer){            this.resetCountdown();        }    };}