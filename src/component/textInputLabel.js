import React, { Component } from 'react';import {    StyleSheet,    TextInput,    Text,    View,    Image,    TouchableOpacity,} from 'react-native';import Icon from 'react-native-vector-icons/FontAwesome';import api from '../config/api';const captchaUrl = api.host + api.captcha;export default class TextInputLabel extends Component {    constructor(props) {        super(props);        this.state = {            text: '',            captchaUrl : captchaUrl,            isInputActivity: false,            isPassword: this.props.isPassword ? this.props.isPassword : false,            isSecureTextEntry: this.props.isPassword ? this.props.isPassword : false        };        this.refreshCaptcha = this.refreshCaptcha.bind(this);        this._onFocus = this._onFocus.bind(this);        this._onChangeText = this._onChangeText.bind(this);        this._onBlur = this._onBlur.bind(this);        this.cleanText = this.cleanText.bind(this);    };    refreshCaptcha (callback) {        if (this.state.captchaUrl.indexOf('?') > -1) {           this.setState(               {captchaUrl: this.state.captchaUrl + `&date=${new Date().getTime()}`},               () => {                   callback && callback()               }           )        } else {            this.setState(                {captchaUrl: this.state.captchaUrl + `?date=${new Date().getTime()}`},                () => {                    callback && callback()                }            )        }    };    _onFocus() {        const { onFocusHandle } = this.props;        onFocusHandle && onFocusHandle();    };    _onChangeText (text) {        const { onChangeTextHandle } = this.props;        onChangeTextHandle && onChangeTextHandle(text);    };    _onBlur () {        this.setState({            isInputActivity: false,        });        if (this.state.isPassword) {            this.setState({                isSecureTextEntry: true            })        }    };    cleanText () {        this.setState({text: ''}, ()=> {            this._onChangeText();        });    };    componentWillReceiveProps (nextProps) {        if (nextProps.refreshCaptcha) {            this.refreshCaptcha(() => {                nextProps.afterRefreshCaptcha && nextProps.afterRefreshCaptcha();            });        }    };    componentWillMount() {        this.props.val && this.setState({text: val});    };    render () {        const { isPassword,isSecureTextEntry, isInputActivity, text, captchaUrl } = this.state;        const {labelText,            leftIcon,            hasCaptcha,            placeholder,            isAutoFocus,            keyboardType,            maxLength,        } = this.props;        return (            <View style={[                styles.inputItem,                {borderBottomColor: isInputActivity || text !== '' ? '#FF0033' : '#C9C9C9'}                ]}            >                {labelText && <Text style={styles.inputLabel}>{labelText}</Text> }                {                    leftIcon && (                        <Icon                            style={styles.inputIcon}                            name={leftIcon.name}                            size={22}                            color={isInputActivity || text !== '' ? '#FF0033' : '#C9C9C9'}                        />                    )                }                <TextInput                    value={text}                    style={hasCaptcha ? styles.captchaInput : styles.textInput}                    placeholder={placeholder}                    autoFocus={isAutoFocus}                    keyboardType={keyboardType || 'default'}                    secureTextEntry={isSecureTextEntry}                    maxLength={maxLength ? maxLength : 50}                    onFocus={() => {                        this.setState({isInputActivity: true});                        this._onFocus ();                    }}                    onChangeText = {(text) => {                        text = text.trim();                        this.setState({text: text});                        this._onChangeText(text)                    }}                    onBlur={() => {                       this._onBlur()                    }}                    autoCapitalize="none"                    underlineColorAndroid='transparent'                />                {isInputActivity && isPassword &&  text !== '' &&(                    !isSecureTextEntry ?  (                        <TouchableOpacity onPress={() => {                            this.setState({                                isSecureTextEntry: true                            })                        }}>                            <Image style={[styles.inputIcon, styles.inputIconSize]}                                   source={require('../assets/images/icon_password_decode.webp')} />                        </TouchableOpacity>                    ) : (                        <TouchableOpacity onPress={() => {                            this.setState({                                isSecureTextEntry: false                            })                        }}>                            <Image style={[styles.inputIcon, styles.inputIconSize]}                                   source={require('../assets/images/icon_password_encrypt.png')} />                        </TouchableOpacity>                    )                )}                {                    isInputActivity && text !== '' && (                        <TouchableOpacity onPress={() => {                            this.setState({text: ''}, ()=> {                                this._onChangeText();                            });                        }}>                            <Image style={[styles.inputIcon, styles.inputIconSize]}                                   source={require('../assets/images/icon_clean.webp')} />                        </TouchableOpacity>                    )                }                {                    hasCaptcha && (                        <TouchableOpacity onPress={() => this.refreshCaptcha()}>                            <Image                                style={styles.captcha}                                source={{uri: captchaUrl}}                            />                        </TouchableOpacity>                    )                }            </View>        )    }}const styles = StyleSheet.create({    inputItem: {        flexDirection: 'row',        alignItems: 'center',        borderBottomWidth: 1,        paddingTop: 6,    },    inputIcon: {        marginRight: 10,        marginBottom: 4,    },    inputIconSize: {        width: 16,        height: 16,        resizeMode: 'contain'    },    textInput: {        flex: 1,        padding: 0,        fontSize: 16,        height: 44,    },    inputLabel: {        fontSize: 16,        paddingRight: 10    },    captchaInput: {        flex: 1,        padding: 0,        fontSize: 16,        height: 44,    },    captcha: {        flex: 1,        borderWidth: StyleSheet.hairlineWidth,        width: 110,        borderColor: '#EEE'    }});