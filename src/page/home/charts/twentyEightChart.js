import React, { Component } from 'react';import {    View,    Text,    StyleSheet,    FlatList,} from 'react-native';import { Col, Row, Grid } from '../../../component/easy-grid';import { issueListService } from '../../../service';import LoadMoreFooter from '../../../component/loadMoreFooter';import Header from '../../../component/header';const relativeValue = 13.5;export default class TwentyEightChart extends Component {    constructor(props) {        super(props)        stateParams = props.navigation.state.params;        this.state = {            dataList:[            ],            lotteryId: stateParams.lotteryId,            size: 20,            totalPage: 1,            loading: stateParams.loading,            refreshing: false        }        this.pageIndex = 0;        this.renderFooter = this.renderFooter.bind(this);        this.renderItem = this.renderItem.bind(this);        this.handleLoadMore = this.handleLoadMore.bind(this);        this.onRefresh = this.onRefresh.bind(this);        this.navigation = props.navigation;    }    renderItem ({item,index}) {        const bgColor = index % 2 === 0 ? '#fff' : '#F6F6F6';        const totalValue = item.prizeNum[3];        const size = totalValue > relativeValue;        const dingleAndDouble = totalValue % 2 === 0;        const bigDobble = !!size && !!dingleAndDouble;        const smallDobble = !size && !!dingleAndDouble;        const bigSingle = !!size && !dingleAndDouble;        const smallSingle = !size && !dingleAndDouble;        return (            <Row key={index} style={{ height: 30, alignItems: 'center',backgroundColor: bgColor }}>                <Col size={1.5} style={ styles.colView } ><Text style={{color: '#6B6B6B'}}>{subStringIssuesNo(item.issueNo)}</Text></Col>                <Col size={1} style={ styles.colView } ><Text style={{color: '#FF0033'}}>{totalValue}</Text></Col>                <Col size={1} style={[styles.colView, !!size ? styles.bigSmallActiveView : null]} >                    { !!size && <Text style={styles.bigSmallActiveText}>大</Text> }                </Col>                <Col size={1} style={[styles.colView, !size ? styles.bigSmallActiveView : null]} >                    { !size && <Text style={styles.bigSmallActiveText}>小</Text>}                </Col>                <Col size={1} style={[styles.colView, !dingleAndDouble && styles.singleActiveView]} >                    { !dingleAndDouble && <Text style={styles.singleActiveText}>单</Text>}                </Col>                <Col size={1} style={[styles.colView, dingleAndDouble && styles.singleActiveView]} >                    { dingleAndDouble && <Text style={styles.singleActiveText}>双</Text> }                </Col>                <Col size={1} style={[styles.colView, bigSingle && styles.bigSingleSmallDoubbleView]} >                    { bigSingle && <Text style={styles.bigSingleSmallDoubbleText}>大单</Text>}                </Col>                <Col size={1} style={[styles.colView, smallSingle && styles.bigSingleSmallDoubbleView]} >                    { smallSingle && <Text style={styles.bigSingleSmallDoubbleText}>小单</Text>}                </Col>                <Col size={1} style={[styles.colView, bigDobble && styles.bigSingleSmallDoubbleView]} >                    { bigDobble && <Text style={styles.bigSingleSmallDoubbleText}>大双</Text>}                </Col>                <Col size={1} style={[styles.colView, smallDobble && styles.bigSingleSmallDoubbleView]} >                    { smallDobble && <Text style={styles.bigSingleSmallDoubbleText}>小双</Text> }                </Col>            </Row>        )    }    handleLoadMore() {        this.pageIndex ++;        this.fetchData();    }    fetchData() {        const { size, totalPage, dataList, lotteryId } = this.state;        const data = {            lotteryId,            size,            page: this.pageIndex        }        if(this.pageIndex > totalPage) {            this.setState({                loading: true            })            return;        }        issueListService(data)            .then((data) => {                this.setState({                    dataList: this.pageIndex === 1 ? data.list : dataList.concat(data.list),                    totalPage: data.totalPage,                    refreshing: false                })            })            .catch(err => {                console.log(err)                this.setState({                    refreshing: false                })            })    }    renderHeader ()  {        return (            <Row style={{height: 40, alignItems: 'center', backgroundColor: '#F6F6F6', borderBottomColor: '#F6F6F6', borderBottomWidth: 1}}>                <Col size={1.5} style={ styles.colView }><Text style={styles.titleText}>期号</Text></Col>                <Col size={1} style={ styles.colView } ><Text style={styles.titleText}>值</Text></Col>                <Col size={1} style={ styles.colView } ><Text style={styles.titleText}>大</Text></Col>                <Col size={1} style={ styles.colView } ><Text style={styles.titleText}>小</Text></Col>                <Col size={1} style={ styles.colView } ><Text style={styles.titleText}>单</Text></Col>                <Col size={1} style={ styles.colView } ><Text style={styles.titleText}>双</Text></Col>                <Col size={1} style={ styles.colView } ><Text style={[styles.titleText, { fontSize: 12 }]}>大单</Text></Col>                <Col size={1} style={ styles.colView } ><Text style={[styles.titleText, { fontSize: 12 }]}>小单</Text></Col>                <Col size={1} style={ styles.colView } ><Text style={[styles.titleText, { fontSize: 12 }]}>大双</Text></Col>                <Col size={1} style={ styles.colView } ><Text style={[styles.titleText, { fontSize: 12 }]}>小双</Text></Col>            </Row>        )    };    renderFooter() {        return <LoadMoreFooter isLoadAll={this.state.loading}/>    }    onRefresh() {        this.pageIndex = 1;        this.setState({            refreshing: true,            loading: false        })        this.fetchData();    }    render() {        return (            <View style={{ flex: 1}}>                <Header headerTitle = '走势图'                        navigation = {this.navigation}/>                <Grid style={{ flex: 1}}>                    {this.renderHeader()}                    <FlatList                        keyExtractor={(item, index) => index}                        data={this.state.dataList}                        renderItem={this.renderItem}                        ListFooterComponent = {this.renderFooter}                        refreshing={this.state.refreshing}                        onEndReached={this.handleLoadMore}                        onEndReachedThreshold={1}                        style={{ flex: 1 }}                        onRefresh = {this.onRefresh}                    />                </Grid>            </View>        );    }}const subStringIssuesNo = (str) => str.substr(-6)const styles = StyleSheet.create({    colView: {        justifyContent: 'center',        alignItems: 'center',        height: 30    },    titleText: {        color: '#888888'    },    bigSmallActiveView: {        backgroundColor: '#F29F4C'    },    bigSmallActiveText: {        color: '#fff'    },    singleActiveView: {        backgroundColor: '#70CD7B'    },    singleActiveText: {        color: '#fff'    },    bigSingleSmallDoubbleView: {        backgroundColor: '#69AAE4'    },    bigSingleSmallDoubbleText: {        color: '#fff',        fontSize: 12    }});