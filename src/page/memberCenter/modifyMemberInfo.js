import React, { Component } from 'react';import {    View,    Text,    Image,    TextInput,    StyleSheet,    TouchableOpacity,    TouchableWithoutFeedback,    Dimensions} from 'react-native';import { NavigationActions } from 'react-navigation';import AppButton from '../../component/appButton';import memberService from '../../service/memberService';import Spinner from 'react-native-spinner';import { showToast, verification } from '../../utils';import errorHandle from '../../service/errorHandle';import Header from '../../component/header';export default class ModifyMemberInfo extends Component {    constructor(props) {        super(props);        this.state = {            isConnecting: false,            userInfo: {},            newFoundsPassword: '',            reNewFoundsPassword: '',            isCanSubmit: false,            wordCount: 0,        }        this.oldUserInfo = {};        this.textCount = 30;        this.toggleSpinner = this.toggleSpinner.bind(this);        this.submitForm = this.submitForm.bind(this);        this.navigate = props.navigation.navigate;        this.navigation = props.navigation;    };    setButtonStatus () {        const { userInfo } = this.state;        this.setState({            isCanSubmit: (  userInfo.username !== this.oldUserInfo.username ||                            userInfo.userNickname !== this.oldUserInfo.userNickname ||                            userInfo.slogan !== this.oldUserInfo.slogan)        })    };    toggleSpinner (status) {        this.setState({            isConnecting: status !== undefined ? status : !this.state.isConnecting        });    };    submitForm () {        const { userInfo } = this.state;        const data = {};        if(userInfo.username !== this.oldUserInfo.username){            data.username = userInfo.username        };        if(userInfo.userNickname !== this.oldUserInfo.userNickname){            data.userNickname = userInfo.userNickname        };        if(userInfo.slogan !== this.oldUserInfo.slogan){            data.slogan = userInfo.slogan        };        const validate = verification(data);        if (validate === 'success'){            this.toggleSpinner(true);            memberService.updateMemberInfo(data)                .then(res => {                    this.toggleSpinner(false);                    showToast('用户信息修改成功', {                        onHide: () => {                            this.navigation.goBack();                        }                    });                }).catch(err => {                this.toggleSpinner(false);                errorHandle(err).then(res => {                    if(res && res.routeName){                        const resetActions = NavigationActions.reset({                            index: 0,                            actions: [NavigationActions.navigate({ routeName: res.routeName})]                        });                        this.props.navigation.dispatch(resetActions);                    }                })            })        }    };    async setUserInfoState () {        try {            const res = await memberService.getUserInfo();            console.log('settings 用户信息', res);            this.oldUserInfo = res;            this.setState ({                userInfo: {...res},                wordCount: this.textCount - res.slogan.length            })        } catch (err) {            console.log('settings 用户信息', err);            errorHandle(err).then(res => {                if(res && res.routeName){                    const resetActions = NavigationActions.reset({                        index: 0,                        actions: [NavigationActions.navigate({ routeName: res.routeName})]                    });                    this.props.navigation.dispatch(resetActions);                }            });            this.setState({userInfo: {telephone: '', isSetFundsPW: 0}})        }    };    componentWillMount () {        this.setUserInfoState()    };    render () {        const { userInfo, isConnecting, isCanSubmit, wordCount} = this.state;        return (            <View>                <Header headerTitle = '个人信息'                        navigation = {this.navigation}/>                <View style={styles.container}>                    <View style={styles.inputFile}>                        <Text>账户名称</Text>                        <TextInput style={styles.inputText}                                   placeholder="请输入账户名称"                                   autoCapitalize={"none"}                                   value={userInfo.username}                                   editable={false}                                   underlineColorAndroid='transparent'                                   onChangeText={(text) => {                                       this.setState({                                           userInfo: Object.assign(this.state.userInfo, {username: text})                                       }, () => {                                           this.setButtonStatus()                                       })                                   }}/>                    </View>                    <View style={styles.inputFile}>                        <Text>账户昵称</Text>                        <TextInput style={styles.inputText}                                   placeholder="请输入账户昵称"                                   autoCapitalize={"none"}                                   value={userInfo.userNickname}                                   maxLength={16}                                   autoFocus                                   underlineColorAndroid='transparent'                                   onChangeText={(text) => {                                       this.setState({                                           userInfo: Object.assign(this.state.userInfo, {userNickname: text})                                       }, () => {                                           this.setButtonStatus()                                       })                                   }}/>                    </View>                    <Text style={{paddingBottom: 10,marginVertical: 5, paddingHorizontal: 10}}>个性签名</Text>                    <View style={[styles.inputFile, styles.textArea]}>                        <TextInput style={[styles.inputText, {height: 40}]}                                   placeholder="请输入个性签名"                                   autoCapitalize={"none"}                                   value={userInfo.slogan}                                   multiline={true}                                   maxLength={30}                                   underlineColorAndroid='transparent'                                   onChangeText={(text) => {                                       this.setState({                                           userInfo: Object.assign(this.state.userInfo, {slogan: text}),                                           wordCount: this.textCount - text.length                                       }, () => {                                           this.setButtonStatus()                                       })                                   }}/>                        <Text style={{position: 'absolute', right: 10, bottom: 10, color: '#999'}}>{ wordCount }</Text>                    </View>                    <AppButton                        title="确认"                        isDisabled={!isCanSubmit}                        onPressHandle={() => {                            this.submitForm();                        }}                    />                    <View style={{ flex: 1 }}>                        <Spinner visible={isConnecting}                                 color="#333"                                 overlayColor="transparent"                                 textContent={"正在加载"}                                 textStyle={{color: '#333', fontSize: 16}} />                    </View>                </View>            </View>        )    };    componentWillUnmount () {        if(this.timer){            this.resetCountdown();        }    };}const styles = StyleSheet.create({    container: {        paddingHorizontal: 10,        paddingVertical: 20    },    inputFile: {        flexDirection: 'row',        alignItems: 'center',        justifyContent: 'flex-start',        backgroundColor: '#FFF',        height: 40,        marginBottom: 10,        borderRadius: 5,        paddingHorizontal: 10    },    inputIcon: {        flex: 1,    },    inputText: {        flex: 1,        marginHorizontal: 10,        fontSize: 16    },    messCaptcha: {        paddingLeft: 10,        borderLeftWidth: StyleSheet.hairlineWidth,        borderColor: '#C9C9C9'    },    textBtn: {        fontSize: 14,        color: '#00FFFF'    },    textArea: {        height: 'auto',        alignItems: 'flex-start',        paddingTop: 5,        padding:30}})