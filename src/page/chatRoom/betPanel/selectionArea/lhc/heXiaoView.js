import React, { Component } from 'react';import {    StyleSheet,    ScrollView,    View,    Text,    TouchableOpacity,    Image,    Dimensions} from 'react-native';import { observer, inject } from 'mobx-react/native';import { betStore } from '../../../../../store';import HasContentView from './hasContentView';import lhcConfig from '../../../../../config/lhcConfig';import { selectionStyles, selectionBallArea } from '../../../../../assets/style';import Icon from 'react-native-vector-icons/FontAwesome';import {showToast} from "../../../../../utils/index";const { width } = Dimensions.get('window');@inject('betStore')@observerexport default class HeXiaoView extends Component {    constructor(props) {        super(props);        this.state = {            selectedMenuIndex: 0,            selectedZodiacTypeIndex: undefined,            selectedZodiac: [],        };        this.renderMenu = this.renderMenu.bind(this);        this.selectZodiacByMenu = this.selectZodiacByMenu.bind(this);        this.tabMenu = props.playInfo.label;        this.subMenu = props.playInfo.menu && props.playInfo.menu[0].label;    }    selectZodiacByMenu (selectedZodiacTypeIndex) {        const { selectedMenuIndex } = this.state;        const menu  = this.props.playInfo.menu[selectedMenuIndex];        const zodiacArr = lhcConfig.zodiacType[selectedZodiacTypeIndex].content;        const selection = menu.playType[0].rates;        const selectedZodiac = selection                                .filter(item => zodiacArr.includes(item.display))                                .map(item => {                                    item.tabMenu = this.tabMenu;                                    item.subMenu = this.subMenu;                                    return item;                                });        betStore.selectBallByMenu(selectedZodiac);    }    renderZodiac (selection) {        const { maxLimit } = this.props.playInfo.menu[this.state.selectedMenuIndex].playType[0];        return (            <View style={[selectionBallArea.selectionBox, {paddingLeft: 10}]}>                {selection.map((rateItem, rateIndex) => {                    const isInclude = betStore.selectedBall.filter(elem => elem.id === rateItem.id).length > 0;                    return (                        <TouchableOpacity                            key={rateIndex}                            style={[                                selectionBallArea.center,                                selectionBallArea.string.wrap,                                selectionBallArea.string.larger,                                (rateIndex+1) % 3 === 0 && {marginRight:0},                                isInclude && selectionBallArea.selectedBg                            ]}                            onPress={() => {                                rateItem.tabMenu = this.tabMenu;                                rateItem.subMenu = this.subMenu;                                if (betStore.selectedBall.length < maxLimit) {                                    betStore.selectBall(rateItem);                                } else {                                    if (isInclude) {                                        betStore.selectBall(rateItem);                                    } else {                                        showToast(`最多只能选 ${maxLimit} 球`)                                    }                                }                            }}                        >                            <Text style={[                                selectionBallArea.string.display,                                !!isInclude && {color: '#FFF'}                            ]}>                                {rateItem.display}                            </Text>                            {!!rateItem.content && (                                <Text style={{color: isInclude ? '#FFF': '#999', fontSize: 12}}>                                    { rateItem.content.join(' ') }                                </Text>                            )}                        </TouchableOpacity>                    )                })}            </View>        )    }    renderMenu (menu) {        const { selectedMenuIndex } = this.state;        return (            <View style={selectionStyles.menuBar}>                { menu.map((item, index) => {                    return (                        <TouchableOpacity                            key={index}                            style={[                                selectionStyles.menuItem,                                (index+1)%4 === 0 && {marginRight: 0},                                selectedMenuIndex === index && {borderColor: '#EC0909'}                            ]}                            onPress={()=>{                                this.setState({                                    selectedZodiacTypeIndex: '',                                    selectedMenuIndex: index,                                });                                betStore.selectedBall = [];                                this.subMenu = item.label;                            }}>                            <Text style={ selectedMenuIndex === index && {color: '#EC0909'}}>                                {item.label}                            </Text>                            { selectedMenuIndex === index && (                                <Image                                    style={selectionStyles.selectedIcon}                                    source={require('../../../../../assets/images/bet_selected_bg.png')}/>                            )}                        </TouchableOpacity>                    )                })}            </View>        )    }    render () {        const { menu } = this.props.playInfo;        const { selectedZodiacTypeIndex, selectedMenuIndex, rateSun } = this.state;        const { rates, minLimit } = menu[selectedMenuIndex].playType[0];        return (            <ScrollView style={selectionStyles.wrap}>                { this.renderMenu(menu) }                <View style={styles.zodiacTypeMenu}>                    {lhcConfig.zodiacType.map((item, index) => {                        return (                            <TouchableOpacity                                key={index}                                style={[                                    styles.zodiac,                                ]}                                onPress={() => {                                    this.setState({                                        selectedZodiacTypeIndex: index                                    }, () => {                                        this.selectZodiacByMenu(index);                                    })                                }}                            >                                <Text style={                                    index === selectedZodiacTypeIndex && {color: '#FF0000'}                                }>                                    {item.type}                                </Text>                            </TouchableOpacity>                        )                    })}                </View>                <View style={styles.tipsWrp}>                    <Text style={[styles.tips, styles.limitTip]}>                        <Icon name="bell-o" color="#999" size={12}/>                        {` 至少选中 ${minLimit} 个号码`}                    </Text>                    {  betStore.computedRate !== undefined &&                        <Text style={[styles.tips, styles.rateTip]}>                            当前赔率: {betStore.computedRate}                    </Text>                    }                </View>                { this.renderZodiac(rates)}            </ScrollView>        )    }}const styles = StyleSheet.create({    tips: {        position: 'absolute',        paddingTop: 10,        paddingHorizontal: 10,        fontSize: 12,        color: '#999',        alignSelf: 'flex-end'    },    zodiacTypeMenu: {        flexDirection: 'row',        flexWrap: 'wrap',        paddingTop: 10,        borderBottomColor: '#E3E3E3',        borderBottomWidth: StyleSheet.hairlineWidth    },    zodiac: {        marginBottom: 10,        width: (width-3)/4,        justifyContent: 'center',        alignItems: 'center',        borderLeftColor: '#E3E3E3',        borderLeftWidth: StyleSheet.hairlineWidth    },    showRate: {        padding: 10,        color: '#FF0000'    },    tipsWrp: {        flexDirection: 'row',        paddingTop: 10,        paddingHorizontal: 10,    },    tips: {        justifyContent: 'center',        alignItems: 'center'    },    rateTip: {        flex: 1,        color: '#FF0000',        fontSize: 14    },    limitTip: {        flex: 2,        color: '#999',        fontSize: 12,    }});