import React, { Component } from 'react';import {    View,    Text,    Image,    TextInput,    StyleSheet,    TouchableOpacity,    Dimensions} from 'react-native';import { NavigationActions } from 'react-navigation';import AppButton from '../../component/appButton';import memberService from '../../service/memberService';import errorHandle from '../../service/errorHandle';import Spinner from 'react-native-spinner';import { showToast, verification, filterBankById } from '../../utils';import { memberFormStyles } from '../../assets/style';import AppPicker from '../../component/filter-box/appPicker';import Header from '../../component/header';const styles = memberFormStyles;const { width,height } = Dimensions.get('window');const dismissKeyboard = require('dismissKeyboard');    export default class BindBankCard extends Component {    static navigationOptions = {        header: null    };    constructor(props) {        super(props);        this.state = {            isConnecting: false,            realName: '',            selectedBankId: '',            bankList: [],            cardNumber: '',            bankAddress: '',            fundsPassword: '',            isCanSubmit: false,            isOpenAppPicker: false,        }        this.navigate = props.navigation.navigate;        this.goBack = props.navigation.goBack;        this.submitForm = this.submitForm.bind(this);        this.toggleSpinner = this.toggleSpinner.bind(this);        this.closeAppPicker = this.closeAppPicker.bind(this);        this.navigation = props.navigation;    };    toggleSpinner (status) {        this.setState({            isConnecting: status !== undefined ? status : !this.state.isConnecting        });    };    submitForm () {        const data = {            realName: this.state.realName,            bankId: this.state.selectedBankId,            cardNumber: this.state.cardNumber,            fundsPassword: this.state.fundsPassword        };        this.state.bankAddress ? data.bankAddress = this.state.bankAddress : null;        const validate = verification(data);        if (validate === 'success') {            this.toggleSpinner(true);            console.log(data);            memberService.addBankcard(data).then(res => {                console.log('addBankcard res' , res);                this.toggleSpinner(false);                showToast(res.message, {                    onHide: () => {this.goBack()}                })            }).catch(err => {                console.log('addBankcard err' , err);                this.toggleSpinner(false);                errorHandle(err).then(res => {                    if(res && res.routeName){                        const resetActions = NavigationActions.reset({                            index: 0,                            actions: [NavigationActions.navigate({ routeName: res.routeName})]                        });                        this.props.navigation.dispatch(resetActions);                    }                })            })        }    };    setButtonStatus () {        this.setState({            isCanSubmit: (!!this.state.realName && !!this.state.fundsPassword &&             !!this.state.selectedBankId && !!this.state.cardNumber)        })    };    closeAppPicker (index) {        if(typeof index === 'undefined') {            this.setState({                isOpenAppPicker: false            })        }else {            const bankItem = this.state.bankList[index];            this.setState({                selectedBankId: bankItem.id,                selectedBankName: bankItem.name,                isOpenAppPicker: false            });        }    };    getBankList () {        memberService.restoreBankListFromStorage().then(res => {            console.log('bankList======', res);            this.setState({                bankList: res.list            })        }).catch(err => {            console.log('bankList======', err);            console.log(err);        })    };    componentWillMount () {        this.getBankList();    };    render () {        const {realName,            selectedBankName,            cardNumber,            bankAddress,            isCanSubmit,            isConnecting,            isOpenAppPicker,            fundsPassword,            bankList} = this.state;        return (            <View style={[styles.container, bankCardStyle.container]}>                <Header headerTitle = '绑定银行卡'                        navigation = {this.navigation}/>                <View style={styles.inputFile}>                    <Text>开户姓名</Text>                    <TextInput style={styles.inputText}                               placeholder="请输入您开户的真实姓名"                               autoCapitalize={"none"}                               value={realName}                               autoFocus                               underlineColorAndroid='transparent'                               onChangeText={(text) => {                                   this.setState({                                       realName: text                                   }, () => {                                       this.setButtonStatus()                                   })                               }}/>                </View>                <View style={styles.inputFile}>                    <Text>银行名称</Text>                    <TouchableOpacity style={{flexDirection: 'row'}}                                      onPress={() => {                                          dismissKeyboard();                                          this.setState({isOpenAppPicker: true})}} >                        <Text style={[                            bankCardStyle.placeholder,                            {color: selectedBankName ? '#333' : '#CECED3' }]}>                            { selectedBankName ? selectedBankName : '请选择您的开户银行'}                        </Text>                        <Image style={bankCardStyle.entryIcon} source={require('../../assets/images/icon_entry.webp')} />                    </TouchableOpacity>                </View>                <View style={styles.inputFile}>                    <Text>开户账号</Text>                    <TextInput style={styles.inputText}                               placeholder="请输入您开户银行账号"                               autoCapitalize={"none"}                               keyboardType={"numeric"}                               value={cardNumber}                               underlineColorAndroid='transparent'                               onChangeText={(text) => {                                   this.setState({                                       cardNumber: text                                   }, () => {                                       this.setButtonStatus()                                   })                               }}/>                </View>                <View style={styles.inputFile}>                    <Text>开户支行</Text>                    <TextInput style={styles.inputText}                               placeholder="请填写您的开户支行"                               autoCapitalize={"none"}                               value={bankAddress}                               underlineColorAndroid='transparent'                               onChangeText={(text) => {                                   this.setState({                                       bankAddress: text                                   }, () => {                                       this.setButtonStatus()                                   })                               }}/>                </View>                <View style={styles.inputFile}>                    <Text>提现密码</Text>                    <TextInput style={styles.inputText}                               placeholder="请输入您的提现密码"                               autoCapitalize={"none"}                               value={fundsPassword}                               secureTextEntry={true}                               keyboardType={"numeric"}                               underlineColorAndroid='transparent'                               maxLength={6}                               onChangeText={(text) => {                                   this.setState({                                       fundsPassword: text                                   }, () => {                                       this.setButtonStatus()                                   })                               }}/>                </View>                <AppButton                    title="确认"                    style={styles.appBtn}                    isDisabled={!isCanSubmit}                    onPressHandle={() => {                        this.submitForm();                    }}                />                { bankList && (                    <AppPicker style={bankCardStyle.picker}                               isOpen={isOpenAppPicker}                               list={bankList}                               listItemLabel={"name"}                               onCloseHandle={this.closeAppPicker}/>                )}                <Spinner visible={isConnecting}                         color="#333"                         overlayColor="transparent"                         textContent={"正在加载"}                         textStyle={{color: '#333', fontSize: 16}} />            </View>        )    };    componentWillUnmount () {        if(this.timer){            this.resetCountdown();        }    };}const bankCardStyle = StyleSheet.create({    container: {        width: width,        height: height,    },    placeholder: {        fontSize: 14,        marginLeft: 10,        width: width-120,    },    entryIcon: {        width: 8,        height: 14,    },    picker: {        position: 'absolute'    }})