import React, { Component } from 'react';import {    View,    Text,    StyleSheet,    FlatList} from 'react-native';import { Col, Row, Grid } from '../../../component/easy-grid';import { issueListService } from '../../../service';import LoadMoreFooter from '../../../component/loadMoreFooter';import Header from '../../../component/header';const relativeValue = 4.5;export default class MultiGridChart extends Component {    static navigationOptions = {        header: null    };    constructor(props) {        super(props);        const stateParams = props.navigation.state.params;        this.state = {            dataList:[],            lotteryId: stateParams.lotteryId,            categoryId: stateParams.categoryId,            size: 20,            totalPage: 1,            loading: false,            refreshing: false,            isFetching: false,            centerNumber: {},        };        this.pageIndex = 0;        this.handleLoadMore = this.handleLoadMore.bind(this);        this.renderFooter = this.renderFooter.bind(this);        this.onRefreshTable = this.onRefreshTable.bind(this);        this.renderItem = this.renderItem.bind(this);        this.navigation = props.navigation;    }    fetchData() {        const { size, dataList, lotteryId } = this.state;        this.setState({            isFetching: true,        });        const data = {            lotteryId,            size,            page: this.pageIndex        };        if(this.totalPage && data.page > this.totalPage) {            this.setState({                loading: true            });            return false;        }        issueListService(data)            .then((data) => {                this.totalPage = data.totalPage;                if(data.totalNum === 0) {                    this.setState({                        dataList: this.pageIndex === 1 ? [] : dataList,                        totalPage: data.totalPage,                        refreshing: false,                        loading: true,                        isFetching: false                    })                }else {                    this.setState({                        dataList: this.pageIndex === 1 ? data.list : [...dataList, ...data.list],                        totalPage: data.totalPage,                        refreshing: false,                        loading: true,                        isFetching: false                    })                }            })            .catch(err => {                console.log(err);                this.setState({                    refreshing: false                })            })    }    handleLoadMore() {        if (this.state.isFetching) return false;        this.setState({            loading: false,        },()=>{            this.pageIndex ++;            this.fetchData();        });    }    onRefreshTable() {        this.pageIndex = 1;        this.setState({            refreshing: true,            loading: true,        },() => {            this.fetchData();        });    }    componentWillMount() {        const { categoryId } = this.props.navigation.state.params;        switch (categoryId) {            case 1:                this.setState({ centerNumber: { closeValue: 22.5, itemValue: 4.5 }})                break;            case 2:                this.setState({ centerNumber: { closeValue: 11.5, itemValue: 5.5 } })                break;            case 4:                this.setState({ centerNumber: { closeValue: 10.5 } })                break;            case 5:                this.setState({ centerNumber: { closeValue: 30, itemValue: 5.5 } })                break;        }    }    renderItem({item}) {        const { closeValue, itemValue } = this.state.centerNumber;        const { prizeNum, issueNo, datetime } = item;        const len = prizeNum.length;        const { categoryId } =this.state;        return (            <View style={styles.wrap}>                <View style={styles.top}>                    <Text style={styles.titleText}>期号:{issueNo}</Text>                    <Text style={styles.titleText}>时间:{datetime}</Text>                </View>                <Grid>                    {                        categoryId === 4 ? (                            <Row style={styles.rowString}>                                <Col size={4} style={styles.colView}><Text style={styles.topText}>开奖号码</Text></Col>                                <Col size={1} style={styles.colView}><Text style={styles.topText}>和值</Text></Col>                                <Col size={1} style={styles.colView}><Text style={styles.topText}>两面</Text></Col>                                <Col size={1.5} style={styles.colView}><Text style={styles.topText}>形态</Text></Col>                            </Row>                        ) : (                            <Row style={styles.rowString}>                                {   !!prizeNum &&                                    prizeNum.map((item, index) =>{                                        const itemNumber = (index+1) !== len;                                        return (                                            itemNumber ? (                                                <Col key={index} style={styles.colView}>                                                    { this.computations(item, itemValue) }                                                </Col>                                            ) : (                                                <Col key={index} style={styles.colView}></Col>                                            )                                        )                                    })                                }                                { !!prizeNum && this.computations(prizeNum[len-1], closeValue) }                            </Row>                        )                    }                    <Row style={styles.rowNumber}>                        {   !!prizeNum &&                            prizeNum.map((item,index) => {                                return (                                    <Col key={index} style={styles.lettryNumberCol} size={1}>                                        <Text style={styles.lotteryNumberText}>{ (index+1) === len ? '=' : item}</Text>                                    </Col>                                )                            })                        }                        <Col style={styles.lettryNumberCol} size={1}>                            <Text style={styles.lotteryNumberText}>{prizeNum[len-1]}</Text>                        </Col>                        { categoryId === 4 && !!prizeNum && this.computations(prizeNum[len-1], closeValue) }                        { categoryId === 4 && this.same(prizeNum) }                    </Row>                </Grid>            </View>        )    }    computations(item, number) {        const small = item < number;        const big = item > number;        const middle = this.state.categoryId === 5 && (item === 30 || item === 11);        const even = item % 2 === 0;        return (            <Col style={styles.colView}>                { !!middle && <Text style={[styles.typeText, styles.middle]}>和</Text>}                { big && !middle && <Text style={[styles.typeText, styles.bigText]}>大</Text>}                { small && !middle && <Text style={[styles.typeText, styles.smallText]}>小</Text>}                { !even && !middle && <Text style={[styles.typeText, styles.singleText]}>单</Text>}                { even && !middle && <Text style={[styles.typeText, styles.dobbleText]}>双</Text>}            </Col>        )    }    same(prizeNum) {        const deweight = prizeNum.filter((element, index, self) => {            return self.indexOf(element) === index;        });        const consecutively = prizeNum[0]+1 === prizeNum[1] && prizeNum[1]+1 === prizeNum[2]        const length = deweight.length;        return (            <Col style={styles.rightOne} size={1.5}>                { length === 3 && <Text style={styles.rightText}>二同号</Text> }                { length === 2 && <Text style={styles.rightText}>三同号</Text> }                { consecutively && <Text style={styles.rightText}>三连号</Text> }                { length !== 2 && length !== 3 && !consecutively && <Text style={styles.rightText}>三不同号</Text> }            </Col>        )    }    renderFooter()  {        const { loading, dataList } = this.state;        return <LoadMoreFooter itemLength={dataList.length} isLoadAll={loading}/>;    }    render () {        const { dataList, refreshing } = this.state;        return (            <View style={{flex:1}}>                <Header headerTitle = '走势图'                        navigation = {this.navigation}/>                    <FlatList style={{ flex: 1 }}                              data={dataList}                              keyExtractor={(item, index) => index}                              renderItem={this.renderItem}                              ListFooterComponent = {this.renderFooter}                              refreshing={refreshing}                              onEndReached={()=>this.handleLoadMore()}                              onEndReachedThreshold={1}                              onRefresh = {this.onRefreshTable}                    />            </View>        )    }}const styles = StyleSheet.create({    wrap: {        backgroundColor: '#fff',        marginBottom: 10,        borderTopColor: '#E5E5E5',        borderTopWidth: StyleSheet.hairlineWidth    },    middle: {        color: '#70CD7B'    },    smallText: {        color: '#333333'    },    bigText: {        color: '#D4504D'    },    singleText: {        color: '#55A4E9'    },    dobbleText: {        color: '#B570C3'    },    titleText: {        color: '#6B6B6B',        fontSize: 13    },    typeText: {        fontSize: 11    },    topText: {      color: '#999',      fontSize: 12,    },    rightOne: {        height: 35,        borderLeftWidth: StyleSheet.hairlineWidth,        borderLeftColor: '#E5E5E5',        justifyContent: 'center',        alignItems: 'center',    },    rightText: {        fontSize: 12,        color: '#DF2214',    },    colView: {        height: 30,        flexDirection: 'row',        justifyContent: 'center',        alignItems: 'center',    },    typeColView: {        flex:1,        height: 30,        flexDirection: 'row',        justifyContent: 'center',        alignItems: 'center',    },    lettryNumberCol: {        flex: 1,        height: 35,        justifyContent: 'center',        alignItems: 'center',        borderRightWidth: StyleSheet.hairlineWidth,        borderRightColor: '#E5E5E5',    },    lotteryNumberText: {        color: '#333'    },    itemWrap: {        backgroundColor: '#fff',        marginBottom: 10,        borderTopColor: '#E5E5E5',        borderTopWidth: StyleSheet.hairlineWidth    },    itemTop: {        flexDirection: 'row',        justifyContent: 'space-between',        paddingHorizontal: 5,        paddingTop: 10,        paddingBottom: 5    },    rowNumber: {        height: 35,        justifyContent: 'center',        alignItems: 'center',        backgroundColor: '#fff',        borderTopWidth: StyleSheet.hairlineWidth,        borderTopColor: '#E5E5E5',        borderBottomWidth: StyleSheet.hairlineWidth,        borderBottomColor: '#E5E5E5',    },    rowString: {        backgroundColor: '#fff',        alignItems: 'center',    },    top: {        flexDirection: 'row',        justifyContent: 'space-between',        paddingHorizontal: 5,        paddingTop: 10,        paddingBottom: 5    }});