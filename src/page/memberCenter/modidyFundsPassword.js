import React, { Component } from 'react';import {    View,    Text,    Image,    TextInput,    StyleSheet,    TouchableOpacity,    TouchableWithoutFeedback,    Dimensions} from 'react-native';import Icon from 'react-native-vector-icons/FontAwesome';import AppButton from '../../component/appButton';import memberService from '../../service/memberService';import Spinner from 'react-native-spinner';import { showToast, verification } from '../../utils';import errorHandle  from '../../service/errorHandle';import Header from '../../component/header';export default class ModifyFundsPassword extends Component {    static navigationOptions = {        header: null    };    constructor(props) {        super(props);        this.state = {            isConnecting: false,            oldFundsPassword: '',            newFundsPassword: '',            reNewFundsPassword: '',            isCanSubmit: false        }        this.toggleSpinner = this.toggleSpinner.bind(this);        this.submitForm = this.submitForm.bind(this);        this.navigate = props.navigation.navigate;        this.goBack = props.navigation.goBack;        this.navigation = props.navigation;    };    setButtonStatus () {        this.setState({            isCanSubmit: (!!this.state.oldFundsPassword && !!this.state.newFundsPassword && !!this.state.reNewFundsPassword)        })    };    toggleSpinner (status) {        this.setState({            isConnecting: status !== undefined ? status : !this.state.isConnecting        });    };    submitForm () {        const data = {            fundsPassword: this.state.oldFundsPassword,            newFundsPassword: this.state.newFundsPassword        };        const validate = verification(data);        if (validate === 'success') {            if(this.state.newFundsPassword === this.state.reNewFundsPassword) {                const params = {                    oldFundsPassword: this.state.oldFundsPassword,                    newFundsPassword: this.state.newFundsPassword                };                this.toggleSpinner(true);                memberService.ModifyFundsPassword(params)                    .then(res => {                        this.toggleSpinner(false);                        showToast(res.message, {                            onHide: () => {                                this.goBack()                            }                        });                    }).catch(err => {                        this.toggleSpinner(false);                        errorHandle(err).then(res => {                            res && res.routeName && this.navigate(res.routeName)                        })                    })            } else {                showToast('两次输入的密码不一致，请重新输入');            }        }    };    componentWillMount () {    };    render () {        const { oldFundsPassword, newFundsPassword,  reNewFundsPassword, isConnecting, isCanSubmit} = this.state;        return (            <View>                <Header headerTitle = '设置提现密码'                        navigation = {this.navigation}/>                <View style={styles.container}>                    <View style={styles.inputFile}>                        <Icon iconStyle={styles.inputIcon} width={24} name="lock" size={24} color={'#C9C9C9'}/>                        <TextInput style={styles.inputText}                                   placeholder="请输入原提现密码"                                   autoCapitalize={"none"}                                   keyboardType={"numeric"}                                   value={oldFundsPassword}                                   secureTextEntry={true}                                   maxLength={6}                                   autoFocus                                   underlineColorAndroid='transparent'                                   onChangeText={(text) => {                                       this.setState({                                           oldFundsPassword: text                                       }, () => {                                           this.setButtonStatus()                                       })                                   }}/>                    </View>                    <View style={styles.inputFile}>                        <Icon iconStyle={styles.inputIcon} width={24} name="lock" size={24} color={'#C9C9C9'}/>                        <TextInput style={styles.inputText}                                   placeholder="请输入新六位数字的提现密码"                                   autoCapitalize={"none"}                                   keyboardType={"numeric"}                                   value={newFundsPassword}                                   secureTextEntry={true}                                   maxLength={6}                                   underlineColorAndroid='transparent'                                   onChangeText={(text) => {                                       this.setState({                                           newFundsPassword: text                                       }, () => {                                           this.setButtonStatus()                                       })                                   }}/>                    </View>                    <View style={styles.inputFile}>                        <Icon iconStyle={styles.inputIcon} width={24} name="lock" size={24} color={'#C9C9C9'}/>                        <TextInput style={styles.inputText}                                   placeholder="请再次输入新提现密码"                                   autoCapitalize={"none"}                                   keyboardType={"numeric"}                                   value={reNewFundsPassword}                                   secureTextEntry={true}                                   maxLength={6}                                   underlineColorAndroid='transparent'                                   onChangeText={(text) => {                                       this.setState({                                           reNewFundsPassword: text                                       }, () => {                                           this.setButtonStatus()                                       })                                   }}/>                    </View>                    <AppButton                        title="确认"                        isDisabled={!isCanSubmit}                        onPressHandle={() => {                            this.submitForm();                        }}                    />                    <View style={{ flex: 1 }}>                        <Spinner visible={isConnecting}                                 color="#333"                                 overlayColor="transparent"                                 textContent={"正在加载"}                                 textStyle={{color: '#333', fontSize: 16}} />                    </View>                </View>            </View>        )    };    componentWillUnmount () {        if(this.timer){            this.resetCountdown();        }    };}const styles = StyleSheet.create({    container: {        paddingHorizontal: 10,        paddingVertical: 20    },    inputFile: {        flexDirection: 'row',        alignItems: 'center',        justifyContent: 'flex-start',        backgroundColor: '#FFF',        height: 40,        marginBottom: 10,        borderRadius: 5,        paddingHorizontal: 10    },    inputIcon: {        flex: 1,    },    inputText: {        flex: 1,        marginHorizontal: 10,        fontSize: 16    },    messCaptcha: {        paddingLeft: 10,        borderLeftWidth: StyleSheet.hairlineWidth,        borderColor: '#C9C9C9'    },    textBtn: {        fontSize: 14,        color: '#00FFFF'    }})