import React, { Component } from 'react';import {    View,    Text,    StyleSheet,    FlatList,} from 'react-native';import { Col, Row, Grid } from '../../../component/easy-grid';import { issueListService } from '../../../service';import LoadMoreFooter from '../../../component/loadMoreFooter';import Header from '../../../component/header';import lhcConfig from '../../../config/lhcConfig'const relativeValue = 13.5;export default class LhcChart extends Component {    constructor(props) {        super(props)        stateParams = props.navigation.state.params;        this.state = {            dataList:[],            lotteryId: stateParams.lotteryId,            size: 20,            totalPage: 1,            loading: false,            refreshing: false,            isFetching: false,        }        this.pageIndex = 0;        this.handleLoadMore = this.handleLoadMore.bind(this);        this.onRefresh = this.onRefresh.bind(this);        this.renderFooter = this.renderFooter.bind(this);        this.renderItem = this.renderItem.bind(this);        this.navigation = props.navigation;    }    renderItem ({item,index}) {        const {issueNo, prizeNum, prizeZodiac} = item;        const len = prizeNum.length;        const bgColor = index % 2 === 0 ? '#fff' : '#F6F6F6';        return (            <Row key={index} style={{ height: 40, alignItems: 'center',backgroundColor: bgColor }}>                <Col size={1.5} style={styles.colView} ><Text style={{color: '#606060',fontSize:12,}}>{issueNo}</Text></Col>                {   prizeNum &&                    prizeNum.map((item, index) => {                        const itemStr = item.toString().length < 2 ? `0${item.toString()}` : item.toString();                        return (                            <Col size={1} style={[styles.colView]} key={index}>                                <View style={[styles.number, styles[lhcConfig.number[itemStr]]]}>                                    <Text style={styles.activeText}>{itemStr}</Text>                                </View>                                <Text style={styles.animal}>{prizeZodiac[index]}</Text>                            </Col>                        )                    })                }            </Row>        )    }    handleLoadMore() {        if (this.state.isFetching) return false;        this.setState({            loading: false,        },()=>{            this.pageIndex ++;            this.fetchData();        });    }    fetchData() {        const { size, dataList, lotteryId } = this.state;        this.setState({            isFetching: true,        });        const data = {            lotteryId,            size,            page: this.pageIndex        };        if(this.totalPage && data.page > this.totalPage) {            this.setState({                loading: true            });            return false;        }        issueListService(data)            .then((data) => {            console.log('data',data);            if(data.totalNum === 0) {                this.setState({                    dataList: this.pageIndex === 1 ? [] : dataList,                    totalPage: data.totalPage,                    refreshing: false,                    loading: true,                    isFetching: false                })            }else {                this.setState({                    dataList: this.pageIndex === 1 ? data.list : [...dataList,...data.list],                    totalPage: data.totalPage,                    refreshing: false,                    loading: true,                    isFetching: false                })            }            })            .catch(err => {                this.setState({                    refreshing: false                })            })    }    renderHeader() {        return(            <Row style={{height: 40, alignItems: 'center', backgroundColor: '#F6F6F6', borderBottomColor: '#F6F6F6', borderBottomWidth: 1}}>                <Col size={1.5} style={ styles.colView }><Text style={styles.titleText}>期号</Text></Col>                <Col size={1} style={ styles.colView } ><Text style={styles.titleText}>正一</Text></Col>                <Col size={1} style={ styles.colView } ><Text style={styles.titleText}>正二</Text></Col>                <Col size={1} style={ styles.colView } ><Text style={styles.titleText}>正三</Text></Col>                <Col size={1} style={ styles.colView } ><Text style={styles.titleText}>正四</Text></Col>                <Col size={1} style={ styles.colView } ><Text style={styles.titleText}>正五</Text></Col>                <Col size={1} style={ styles.colView } ><Text style={styles.titleText}>正六</Text></Col>                <Col size={1} style={ styles.colView } ><Text style={styles.titleText}>特码</Text></Col>            </Row>        )    };    renderFooter(){        const { loading, dataList } = this.state;        return <LoadMoreFooter itemLength={dataList.length} isLoadAll={loading}/>;    }    onRefresh() {        this.pageIndex = 1;        this.setState({            refreshing: true,            loading: true,        },() => {            this.fetchData();        });    }    render() {        const { dataList, refreshing } = this.state;        return (            <View style={{ flex: 1}}>                <Header headerTitle = '走势图'                        navigation = {this.navigation}/>                <Grid style={{ flex: 1,backgroundColor: '#fff',}}>                    {this.renderHeader()}                    <FlatList style={{ flex: 1 }}                              data={dataList}                              keyExtractor={(item, index) => index}                              renderItem={this.renderItem}                              ListFooterComponent = {this.renderFooter}                              refreshing={refreshing}                              onEndReached={this.handleLoadMore}                              onEndReachedThreshold={1}                              onRefresh = {this.onRefresh}                    />                </Grid>            </View>        );    }}const styles = StyleSheet.create({    colView: {        justifyContent: 'center',        alignItems: 'center',        height: 40,        borderRightWidth: StyleSheet.hairlineWidth,        borderRightColor: '#E3E3E3',    },    titleText: {        fontSize: 13,        color: '#888888'    },    bigSmallActiveView: {        backgroundColor: '#F29F4C'    },    bigSmallActiveText: {        color: '#fff',    },    singleActiveView: {        backgroundColor: '#70CD7B'    },    singleActiveText: {        color: '#fff'    },    bigSingleSmallDoubbleView: {        backgroundColor: '#69AAE4'    },    bigSingleSmallDoubbleText: {        color: '#fff',        fontSize: 12    },    number: {        width: 18,        height: 18,        borderRadius: 9,        backgroundColor: '#0E86E3',        justifyContent: 'center',        alignItems: 'center',    },    activeText: {        fontSize: 12,        color: '#fff',        backgroundColor: 'transparent'    },    animal: {        fontSize: 12,        color: '#8F9AB5',        paddingTop: 3,    },    red: {        backgroundColor: '#EF2525'    },    green: {        backgroundColor: '#38BE4F'    },    blue: {        backgroundColor: '#0E86E3'    },});