import React, { Component } from 'react';import {    StyleSheet,    View,    Text,    TouchableOpacity,    FlatList,    TouchableHighlight} from 'react-native';import LoadMoreFooter from '../../component/loadMoreFooter';import errorHandle from '../../service/errorHandle';import accountService from '../../service/accountService';import { listStyles, recordStyle } from '../../assets/style';import FilterBox from '../../component/filter-box';import { showToast } from '../../utils';import Header from '../../component/header';const styles = listStyles;const record = recordStyle;export default class WithDrawRecord extends Component {    constructor(props) {        super(props);        this.size = 20;        this.currentPage = 0;        this.startTime = '';        this.endTime = '';        this.state = {            isOpenFilterBar: false,            isLoadingMore: false,            isRefreshing: false,            isFetching: false,            dataSource: [],        };        this.navigate = props.navigation.navigate;        this.navigation = props.navigation;        this.toggleFilterBar = this.toggleFilterBar.bind(this);        this.renderTableRow = this.renderTableRow.bind(this);        this.renderLoadMore = this.renderLoadMore.bind(this);        this.loadMore = this.loadMore.bind(this);        this.onRefreshTable = this.onRefreshTable.bind(this);        this.onSubmitHandle = this.onSubmitHandle.bind(this);        this.headerRight = this.headerRight.bind(this);    };    toggleFilterBar (status) {        const barStatus = status ? status : !this.state.isOpenFilterBar;        this.setState({            isOpenFilterBar: barStatus,        })    };    headerRight() {        return (            <TouchableOpacity onPress={() => this.toggleFilterBar()}>                <Text style={{color: '#FFF',}}>筛选</Text>            </TouchableOpacity>        )    }    renderTableRow({ item }){        return(            <View style={record.rowBox}>                <View style={record.flexBox}>                    <View style={record.InfoLeftItem}>                        <Text style={record.info}>到账金额{item.applyAmount}</Text>                    </View>                    <View style={record.InfoLeftItem}>                        <Text style={record.minorInfo}>手续费{item.handlingCharge}</Text>                    </View>                </View>                <View style={record.flexBox}>                    <View style={record.InfoRightItem}>                        <Text style={record.info}>{item.status}</Text>                    </View>                    <View style={record.InfoRightItem}>                        <Text style={record.minorInfo}>{item.datetime}</Text>                    </View>                </View>            </View>        )    };    renderLoadMore () {        return <LoadMoreFooter isLoadAll={this.state.isLoadingMore}/>;    };    componentWillMount() {        this.props.navigation.setParams({ toggleFilterBar: this.toggleFilterBar.bind(this) });    };    render(){        const { dataSource, isRefreshing, isOpenFilterBar } = this.state;        return(            <View style={styles.container}>                <Header                    headerTitle = '提现记录'                    headerRight = {this.headerRight}                    navigation = {this.navigation}/>                <FilterBox ref="filter"                           onPressHandle={this.toggleFilterBar}                           isOpenFilterBar={isOpenFilterBar}                           onClosehandle={() => this.toggleFilterBar(false)}                           onSubmitHandle={(data) => this.onSubmitHandle(data)}                           isShowAppPick={false}                />                <FlatList style={{flex: 1}}                          data={dataSource}                          onEndReachedThreshold={0.5}                          keyExtractor={(item, index) => index}                          onEndReached = {() => this.loadMore()}                          renderItem={(rowData) => this.renderTableRow(rowData)}                          ListFooterComponent={() => this.renderLoadMore()}                          refreshing= {isRefreshing}                          onRefresh={ this.onRefreshTable.bind(this) }                />            </View>        );    };    onRefreshTable () {        this.currentPage = 1;        this.setState({            isRefreshing: true,            isLoadingMore: true,        }, () => {            this.fetchRecord()        })    };    loadMore () {        if (this.state.isFetching) return false;        this.setState({            isLoadingMore: false        }, () => {            this.currentPage ++ ;            this.fetchRecord();        });    };    onSubmitHandle (data) {        if ( data.startTime ) {            this.startTime = data.startTime;        } else {            return showToast('请输入开始时间');        };        if ( data.endTime ) {            this.endTime = data.endTime;        } else {            return showToast('请输入结束时间');        };        if ( new Date(data.startTime) > new Date(data.endTime) ) return showToast('开始时间不能大于结束时间');        this.currentPage = 1;        this.setState({            isOpenFilterBar: false        }, () => {            this.fetchRecord();        })    };    onErrorHandle (err) {        errorHandle(err).then(res => {            if(res && res.routeName){                this.navigate(res.routeName);            }        })    };    fetchRecord () {        this.setState({            isFetching: true,        });        const data = {            size: this.size,            page: this.currentPage,        };        if (this.startTime) { data.startTime = this.startTime };        if (this.endTime) {data.endTime = this.endTime};        console.log(data);        if (this.totalPage && data.page > this.totalPage) {            this.setState({                isLoadingMore: true,            });            return false;        };        accountService.getWithdrawalsList(data).then(res => {            console.log(res);            this.totalPage = res.data.totalPage;            if(res.data.totalNum === 0) {                this.setState ({                    isRefreshing: false,                    isLoadingMore: true,                    isFetching: false,                    dataSource: this.currentPage === 1 ? [] : this.state.dataSource                });            } else {                this.setState({                    isRefreshing: false,                    isFetching: false,                    isLoadingMore: true,                    dataSource: this.currentPage === 1 ? res.data.list : [...this.state.dataSource, ...res.data.list]                });            };        }).catch(err => {            console.log(err);            this.setState ({                isFetching: false,                isLoadingMore: true,                isRefreshing: false,            });            this.onErrorHandle(err);        });    };}