import React, { Component } from 'react';import {    StyleSheet,    Text,    View,    TouchableOpacity,} from 'react-native';import memberService from '../../service/memberService';import { lotteryIssueService } from '../../service';import errorHandle from '../../service/errorHandle';import { observer, inject } from 'mobx-react/native';import { betStore, profileStore } from '../../store';@observerexport default class StatusBar extends Component {    constructor(props){        super(props);        this.state = {            isUpdatingBalance: true,            issueInfo: {},            isEntertained: true,            countdownTime:{                hours: '封',                minutes: '盘',                seconds: '中'            }        };        this.updateUserInfo = this.updateUserInfo.bind(this);        this.getLotteryIssue = this.getLotteryIssue.bind(this);        this.tick = this.tick.bind(this);        this.clearTimer = this.clearTimer.bind(this);        this.navigate = props.navigation.navigate;        this.onUpdating = props.onUpdating;        this.intervalTimer = null;        this.timeoutTimer = null;        this.updateUserInfo();        this.getLotteryIssue();    }    getLotteryIssue () {        this.onUpdating && this.onUpdating(true);        this.clearTimer();        const { onStart, onClose } = this.props;        const startFetch = Math.floor(new Date().getTime()/1000);        lotteryIssueService({lotteryId: this.props.lotteryId}).then(issueInfo => {            const endFetch = Math.floor(new Date().getTime()/1000);            const fetchTime = endFetch - startFetch;            const timeDiff = endFetch - issueInfo.serverTime;            let issueCloseTime = issueInfo.endTime - fetchTime;            let issueStartTime = issueInfo.startTime - fetchTime;            let currentTime = endFetch - timeDiff;            if (currentTime < issueStartTime) {                onClose && onClose(issueInfo);                this.setState({                    isEntertained: true,                    countdownTime:{                        hours: '封',                        minutes: '盘',                        seconds: '中'                    }                });                this.timeoutTimer = setTimeout(function(){                    this.getLotteryIssue();                }.bind(this), (issueStartTime-currentTime)*1000)            } else {                this.setState({                    isEntertained: false                });                this.tick(issueCloseTime, currentTime);                onStart && onStart(issueInfo);                this.intervalTimer = setInterval(function(){                    issueCloseTime--;                    this.tick(issueCloseTime, currentTime)                }.bind(this), 1000);            }            this.setState({issueInfo}, ()=> {this.onUpdating && this.onUpdating(false);});        }).catch(err => {            this.setState({                isEntertained: true,                countdownTime:{                    hours: '封',                    minutes: '盘',                    seconds: '中'                }            });            this.onUpdating && this.onUpdating(false);            onClose && onClose();            errorHandle(err).then(err => {                if (err.routeName) {                    this.navigate(err.routeName)                } else {                    this.clearTimer()                }            })        })    }    tick (issueCloseTime, currentTime) {        if (currentTime <= issueCloseTime) {            const distance = issueCloseTime - currentTime;            this.setState({               countdownTime: this.timeFormat(distance)            })        } else {            clearInterval(this.timer);            this.getLotteryIssue();        }    }    timeFormat (distance) {        const second = 1, minute = second * 60, hour = minute * 60, day = hour * 24;        let days = Math.floor(distance / day);        let hours = Math.floor((distance % day) / hour);        let minutes = Math.floor((distance % hour) / minute);        let seconds = Math.floor((distance % minute) / second);        hours = days * 24 + hours;        if(hours < 10) {            hours = '0' + hours        }        if(minutes < 10) {            minutes = '0' + minutes        }        if(seconds < 10) {            seconds = '0' + seconds        }        return {            hours,            minutes,            seconds        }    }    updateUserInfo () {        this.setState({isUpdatingBalance: true});        profileStore.fetchUserInfo().then(res => {            this.setState({isUpdatingBalance: false})        }).catch(err => {            console.log('update user info fail')        })    }    clearTimer () {        !!this.intervalTimer && clearInterval(this.intervalTimer);        !!this.timeoutTimer && clearInterval(this.timeoutTimer);    }    componentDidMount () {    }    componentWillUnmount () {        this.clearTimer()    }    render() {        const { isUpdatingBalance, issueInfo , countdownTime,  isEntertained} = this.state;        const issueNumLen = (issueInfo.issueNo && issueInfo.issueNo.length ) || 0;        return (            <View style={styles.statusBar}>                <View style={styles.statusBarItem}>                    <Text style={[styles.font12, styles.tips]}>                        {`距 ${ issueNumLen > 8 ? issueInfo.issueNo.substring(4, issueNumLen) : !!issueInfo.issueNo ? issueInfo.issueNo : '0000000'} 期截止`}                    </Text>                    <View style={styles.flexCenter}>                        <View style={styles.timeBlock}>                            <Text style={[styles.fontStyle, isEntertained && {fontSize: 14}]}>                                {!!countdownTime.hours ? countdownTime.hours : '封'}                            </Text>                        </View>                        <Text style={styles.timeSeg}>:</Text>                        <View style={styles.timeBlock}>                            <Text style={[styles.fontStyle, isEntertained && {fontSize: 14}]}>                                {!!countdownTime.minutes ?  countdownTime.minutes : '盘'}                            </Text>                        </View>                        <Text style={styles.timeSeg}>:</Text>                        <View style={styles.timeBlock}>                            <Text style={[styles.fontStyle, isEntertained && {fontSize: 14}]}>                                {!!countdownTime.seconds ?  countdownTime.seconds : '中'}                            </Text>                        </View>                    </View>                </View>                <TouchableOpacity style={[styles.statusBarItem]}                                  onPress={this.updateUserInfo}>                    <Text style={[styles.font12, styles.tips]}>我的余额</Text>                    <View style={styles.flexCenter}>                        <Text style={[styles.balance,                            isUpdatingBalance && {fontWeight:'normal', fontSize: 14, color: '#666'}]}>                            {isUpdatingBalance ? '加载中...' : `${profileStore.userInfo.balance} 元`}                        </Text>                    </View>                </TouchableOpacity>            </View>        )    }}const styles = StyleSheet.create({    statusBar: {        backgroundColor: '#fff',        flexDirection: 'row',        alignItems: 'center',        justifyContent: 'center',        height: 60,        paddingVertical: 8,        borderColor: '#E9E8E8',        borderTopWidth: StyleSheet.hairlineWidth,        borderBottomWidth: StyleSheet.hairlineWidth,    },    statusBarItem: {        flexDirection: 'column',        flex: 1,        justifyContent: 'center',        alignItems: 'center',        borderRightColor: '#EFEFEF',        borderRightWidth: StyleSheet.hairlineWidth    },    tips: {        flex: 1,        color: '#666',        paddingTop: 3,    },    balance: {        fontSize: 16,        color: '#333',        height:26,        lineHeight: 26,        fontWeight: 'bold'    },    font12: {        fontSize: 12,    },    flexCenter: {        flexDirection: 'row',        justifyContent: 'center',        alignItems: 'center',    },    timeBlock: {        height: 22,        width: 26,        alignItems: 'center',        justifyContent: 'center',        backgroundColor: '#505050',        borderRadius: 3,        marginHorizontal: 1    },    timeSeg: {        alignItems: 'center',        color: '#676C76',        fontSize: 14    },    fontStyle: {        fontSize: 18,        letterSpacing: 2,        marginLeft: 2,        fontFamily: 'DS-Digital',        color: '#FFF'    }});