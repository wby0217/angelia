import React, { Component } from 'react';import {    Text,    StyleSheet,    TouchableOpacity,    View,} from 'react-native';import ScrollableTabView from 'react-native-scrollable-tab-view';import DefaultTabBar from '../../../component/customTabBar';import FilterBox from '../../../component/filter-box';import AllRecord from './allRecrod';import LosingPrize from './losingPrize';import WaitForAward from './waitForAward';import WonPrize from './wonPrize';import { showToast } from '../../../utils';import Header from '../../../component/header';export default class MemberGameRecord extends Component {    constructor(props){        super(props);        this.state = {            isOpenFilterBar: false,            filters: {},            lotteryCategory: []        };        this.navigation = this.props.navigation;        this.onSubmitHandle = this.onSubmitHandle.bind(this);        this.toggleFilterBar = this.toggleFilterBar.bind(this);        this.headerRight = this.headerRight.bind(this);    };    toggleFilterBar (status) {        const barStatus = status ? status : !this.state.isOpenFilterBar;        this.setState({            isOpenFilterBar: barStatus,        })    };    componentWillMount() {        this.props.navigation.setParams({ toggleFilterBar: this.toggleFilterBar.bind(this) });        this.restoreLotteryCategoryFormStorage();    };    headerRight() {        return (            <TouchableOpacity onPress={() => this.toggleFilterBar()}>                <Text style={{color: '#FFF'}}>筛选</Text>            </TouchableOpacity>        )    }    render () {        const { filters, lotteryCategory } = this.state;        return (            <View style={{flex: 1}}>                <Header headerTitle = '游戏记录'                        headerRight = {this.headerRight}                        navigation = {this.navigation}/>                {                    lotteryCategory && (                        <FilterBox ref="filter"                                   onPressHandle={this.toggleFilterBar}                                   isOpenFilterBar={this.state.isOpenFilterBar}                                   onClosehandle={() => this.toggleFilterBar(false)}                                   onSubmitHandle={(data) => this.onSubmitHandle(data)}                                   isShowAppPick={true}                                   list={lotteryCategory}                                   listItemLabel={"LotteryName"}                        />                    )                }                <ScrollableTabView                    renderTabBar={() => <DefaultTabBar/>}                    tabBarUnderlineStyle={{ backgroundColor: '#FF0033',height: 2 }}                    tabBarActiveTextColor="#FF0033"                    tabBarInactiveTextColor="#999"                    tabBarBackgroundColor="#fff"                    initialPage={0}                    onChangeTab={({i}) => {console.log(i)}}                >                    <AllRecord tabLabel="全部注单" filters={filters} navigation={this.navigation}/>                    <WonPrize tabLabel="已中奖" filters={filters} navigation={this.navigation}/>                    <WaitForAward tabLabel="待开奖" filters={filters} navigation={this.navigation}/>                    <LosingPrize tabLabel="未中奖" filters={filters} navigation={this.navigation}/>                </ScrollableTabView>            </View>        )    };    onSubmitHandle (data) {        const options = {};        if (data.startTime ){            options.startTime = data.startTime;        }        if (data.endTime ) {            options.endTime = data.endTime;        }        if ( data.endTime &&  data.endTime && new Date(data.startTime) > new Date(data.endTime) ) {            return showToast('开始时间不能大于结束时间');        }        if (data.lotteryId ) {            options.lotteryId = data.lotteryId        }        this.setState({            filters: options,            isOpenFilterBar: false        });    };    restoreLotteryCategoryFormStorage () {        storage.load({key: 'lotteryCategory'}).then(res => {            console.log('restoreLotteryCategoryFormStorage', res.list)            this.setState({                lotteryCategory: res.list            })        }).catch(err => {            console.log('restoreLotteryCategoryFormStorage', err)        })    }}const styles = StyleSheet.create({    tagText: {        fontSize: 14,        color: '#F1841F'    }})